# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_01_DummyInvoke.baseline

# Run progress: 0,00% complete, ETA 00:01:34
# Fork: 1 of 1
# Warmup Iteration   1: 38958914,324 ops/s
Iteration   1: 38498736,144 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_01_DummyInvoke.baseline":
  38498736,144 ops/s

Secondary result "org.sample.JMHBenchmark_01_DummyInvoke.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 29,6%  59,2% org.sample.jmh_generated.JMHBenchmark_01_DummyInvoke_baseline_jmhTest.baseline_thrpt_jmhStub
 20,4%  40,8% org.sample.JMHBenchmark_01_DummyInvoke.baseline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod

# Run progress: 2,13% complete, ETA 00:02:53
# Fork: 1 of 1
# Warmup Iteration   1: 22206743,738 ops/s
Iteration   1: 22113035,970 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod":
  22113035,970 ops/s

Secondary result "org.sample.JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 31,1%  62,2% org.sample.JMHBenchmark_01_DummyInvoke._dummyMethod
 11,2%  22,4% org.sample.JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod
  7,7%  15,3% org.sample.jmh_generated.JMHBenchmark_01_DummyInvoke_testInvocationDummyMethod_jmhTest.testInvocationDummyMethod_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.baseline

# Run progress: 4,26% complete, ETA 00:02:47
# Fork: 1 of 1
# Warmup Iteration   1: 30780486,530 ops/s
Iteration   1: 38499439,694 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_02_InvokeWithReturn.baseline":
  38499439,694 ops/s

Secondary result "org.sample.JMHBenchmark_02_InvokeWithReturn.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 31,1%  62,2% org.sample.jmh_generated.JMHBenchmark_02_InvokeWithReturn_baseline_jmhTest.baseline_thrpt_jmhStub
 18,9%  37,8% org.sample.JMHBenchmark_02_InvokeWithReturn.baseline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.noInvocation

# Run progress: 6,38% complete, ETA 00:02:43
# Fork: 1 of 1
# Warmup Iteration   1: 12365350,141 ops/s
Iteration   1: 12246560,132 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_02_InvokeWithReturn.noInvocation":
  12246560,132 ops/s

Secondary result "org.sample.JMHBenchmark_02_InvokeWithReturn.noInvocation:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 27,0%  54,1% org.openjdk.jmh.infra.Blackhole.consume
 11,7%  23,5% org.sample.jmh_generated.JMHBenchmark_02_InvokeWithReturn_noInvocation_jmhTest.noInvocation_thrpt_jmhStub
 11,2%  22,4% org.sample.JMHBenchmark_02_InvokeWithReturn.noInvocation

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh

# Run progress: 8,51% complete, ETA 00:02:39
# Fork: 1 of 1
# Warmup Iteration   1: 11632860,828 ops/s
Iteration   1: 11452008,682 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh":
  11452008,682 ops/s

Secondary result "org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 21,4%  42,9% org.openjdk.jmh.infra.Blackhole.consume
 19,4%  38,8% org.sample.JMHBenchmark_02_InvokeWithReturn._dummyMethodWithReturnValue
  6,1%  12,2% org.sample.jmh_generated.JMHBenchmark_02_InvokeWithReturn_testInvocationDummyMethodWithBh_jmhTest.testInvocationDummyMethodWithBh_thrpt_jmhStub
  3,1%   6,1% org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue

# Run progress: 10,64% complete, ETA 00:02:35
# Fork: 1 of 1
# Warmup Iteration   1: 12258566,620 ops/s
Iteration   1: 11365324,044 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue":
  11365324,044 ops/s

Secondary result "org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 17,7%  35,4% org.openjdk.jmh.infra.Blackhole.consume
 16,2%  32,3% org.sample.JMHBenchmark_02_InvokeWithReturn._dummyMethodWithReturnValue
 11,6%  23,2% org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue
  4,5%   9,1% org.sample.jmh_generated.JMHBenchmark_02_InvokeWithReturn_testInvocationDummyMethodWithReturnValue_jmhTest.testInvocationDummyMethodWithReturnValue_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.baseline

# Run progress: 12,77% complete, ETA 00:02:31
# Fork: 1 of 1
# Warmup Iteration   1: 37828256,309 ops/s
Iteration   1: 37665075,983 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.baseline":
  37665075,983 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 25,3%  50,5% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.baseline
 24,7%  49,5% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_baseline_jmhTest.baseline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.noInvocationWithReturnValue

# Run progress: 14,89% complete, ETA 00:02:28
# Fork: 1 of 1
# Warmup Iteration   1: 15430137,091 ops/s
Iteration   1: 15274812,536 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.noInvocationWithReturnValue":
  15274812,536 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.noInvocationWithReturnValue:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 26,5%  53,1% org.openjdk.jmh.infra.Blackhole.consume
 13,8%  27,6% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.noInvocationWithReturnValue
  9,7%  19,4% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_noInvocationWithReturnValue_jmhTest.noInvocationWithReturnValue_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInline

# Run progress: 17,02% complete, ETA 00:02:24
# Fork: 1 of 1
# Warmup Iteration   1: 22094768,864 ops/s
Iteration   1: 21383821,547 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInline":
  21383821,547 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 29,1%  58,2% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint._dummyMethodWithHintDontInline
 11,2%  22,4% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_testInvocationDummyMethodWithHintDontInline_jmhTest.testInvocationDummyMethodWithHintDontInline_thrpt_jmhStub
  9,7%  19,4% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInlineBh

# Run progress: 19,15% complete, ETA 00:02:20
# Fork: 1 of 1
# Warmup Iteration   1: 11938655,604 ops/s
Iteration   1: 11794918,590 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInlineBh":
  11794918,590 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInlineBh:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 24,5%  49,0% org.openjdk.jmh.infra.Blackhole.consume
 14,5%  29,0% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint._dummyMethodWithReturnValueWithHintDontInline
  8,5%  17,0% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_testInvocationDummyMethodWithHintDontInlineBh_jmhTest.testInvocationDummyMethodWithHintDontInlineBh_thrpt_jmhStub
  2,5%   5,0% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInlineBh

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInline

# Run progress: 21,28% complete, ETA 00:02:17
# Fork: 1 of 1
# Warmup Iteration   1: 21289731,062 ops/s
Iteration   1: 20100465,748 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInline":
  20100465,748 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 25,5%  51,0% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint._dummyMethodWithHintInline
 12,2%  24,5% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInline
 12,2%  24,5% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_testInvocationDummyMethodWithHintInline_jmhTest.testInvocationDummyMethodWithHintInline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInlineBh

# Run progress: 23,40% complete, ETA 00:02:13
# Fork: 1 of 1
# Warmup Iteration   1: 10757330,365 ops/s
Iteration   1: 10604442,027 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInlineBh":
  10604442,027 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInlineBh:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 25,0%  50,0% org.openjdk.jmh.infra.Blackhole.consume
 17,9%  35,7% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint._dummyMethodWithReturnValueWithHintInline
  4,6%   9,2% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_testInvocationDummyMethodWithHintInlineBh_jmhTest.testInvocationDummyMethodWithHintInlineBh_thrpt_jmhStub
  2,6%   5,1% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInlineBh

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintDontInline

# Run progress: 25,53% complete, ETA 00:02:09
# Fork: 1 of 1
# Warmup Iteration   1: 10963567,291 ops/s
Iteration   1: 10655629,821 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintDontInline":
  10655629,821 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintDontInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 18,7%  37,4% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint._dummyMethodWithReturnValueWithHintDontInline
 17,7%  35,4% org.openjdk.jmh.infra.Blackhole.consume
  8,1%  16,2% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_testInvocationDummyMethodWithReturnValueWithHintDontInline_jmhTest.testInvocationDummyMethodWithReturnValueWithHintDontInline_thrpt_jmhStub
  5,1%  10,1% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintDontInline
  0,5%   1,0% java.lang.Class.isInstance

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintInline

# Run progress: 27,66% complete, ETA 00:02:05
# Fork: 1 of 1
# Warmup Iteration   1: 11095065,304 ops/s
Iteration   1: 10639608,555 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintInline":
  10639608,555 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 17,7%  35,4% org.openjdk.jmh.infra.Blackhole.consume
 17,2%  34,3% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint._dummyMethodWithReturnValueWithHintInline
 10,1%  20,2% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_testInvocationDummyMethodWithReturnValueWithHintInline_jmhTest.testInvocationDummyMethodWithReturnValueWithHintInline_thrpt_jmhStub
  5,1%  10,1% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintInline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.baseline

# Run progress: 29,79% complete, ETA 00:02:02
# Fork: 1 of 1
# Warmup Iteration   1: 39695534,331 ops/s
Iteration   1: 37386680,095 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.baseline":
  37386680,095 ops/s

Secondary result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 26,0%  52,0% org.sample.jmh_generated.JMHBenchmark_04_DummyInvokeWithValue_baseline_jmhTest.baseline_thrpt_jmhStub
 24,0%  48,0% org.sample.JMHBenchmark_04_DummyInvokeWithValue.baseline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue

# Run progress: 31,91% complete, ETA 00:01:58
# Fork: 1 of 1
# Warmup Iteration   1: 15069547,720 ops/s
Iteration   1: 13239486,113 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue":
  13239486,113 ops/s

Secondary result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 23,5%  46,9% org.openjdk.jmh.infra.Blackhole.consume
 14,8%  29,6% org.sample.jmh_generated.JMHBenchmark_04_DummyInvokeWithValue_noInvocationReturnValue_jmhTest.noInvocationReturnValue_thrpt_jmhStub
 11,7%  23,5% org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue

# Run progress: 34,04% complete, ETA 00:01:54
# Fork: 1 of 1
# Warmup Iteration   1: 14627313,899 ops/s
Iteration   1: 14559630,093 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue":
  14559630,093 ops/s

Secondary result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 25,0%  50,0% org.openjdk.jmh.infra.Blackhole.consume
 15,8%  31,6% org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue
  9,2%  18,4% org.sample.jmh_generated.JMHBenchmark_04_DummyInvokeWithValue_noInvocationReturnVolatileValue_jmhTest.noInvocationReturnVolatileValue_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod

# Run progress: 36,17% complete, ETA 00:01:51
# Fork: 1 of 1
# Warmup Iteration   1: 22252483,628 ops/s
Iteration   1: 21520248,054 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod":
  21520248,054 ops/s

Secondary result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 25,8%  51,5% org.sample.JMHBenchmark_04_DummyInvokeWithValue._dummyMethod
 14,4%  28,9% org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod
  9,8%  19,6% org.sample.jmh_generated.JMHBenchmark_04_DummyInvokeWithValue_testInvocationDummyMethod_jmhTest.testInvocationDummyMethod_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue

# Run progress: 38,30% complete, ETA 00:01:47
# Fork: 1 of 1
# Warmup Iteration   1: 11934961,668 ops/s
Iteration   1: 11745075,020 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue":
  11745075,020 ops/s

Secondary result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 25,0%  50,0% org.sample.JMHBenchmark_04_DummyInvokeWithValue._dummyMethodWithReturnValue
 11,7%  23,5% org.openjdk.jmh.infra.Blackhole.consume
  6,6%  13,3% org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue
  6,6%  13,3% org.sample.jmh_generated.JMHBenchmark_04_DummyInvokeWithValue_testInvocationDummyMethodWithReturnValue_jmhTest.testInvocationDummyMethodWithReturnValue_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue

# Run progress: 40,43% complete, ETA 00:01:43
# Fork: 1 of 1
# Warmup Iteration   1: 12217806,282 ops/s
Iteration   1: 11611181,171 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue":
  11611181,171 ops/s

Secondary result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 21,1%  42,1% org.sample.JMHBenchmark_04_DummyInvokeWithValue._dummyMethodWithReturnVolatileValue
 16,3%  32,6% org.openjdk.jmh.infra.Blackhole.consume
  6,3%  12,6% org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue
  6,3%  12,6% org.sample.jmh_generated.JMHBenchmark_04_DummyInvokeWithValue_testInvocationDummyMethodWithReturnVolatileValue_jmhTest.testInvocationDummyMethodWithReturnVolatileValue_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.baseline

# Run progress: 42,55% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 39708796,694 ops/s
Iteration   1: 38850300,005 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_05_DummyInvokeState.baseline":
  38850300,005 ops/s

Secondary result "org.sample.JMHBenchmark_05_DummyInvokeState.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 32,3%  64,6% org.sample.jmh_generated.JMHBenchmark_05_DummyInvokeState_baseline_jmhTest.baseline_thrpt_jmhStub
 17,7%  35,4% org.sample.JMHBenchmark_05_DummyInvokeState.baseline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS

# Run progress: 44,68% complete, ETA 00:01:36
# Fork: 1 of 1
# Warmup Iteration   1: 14204822,923 ops/s
Iteration   1: 14162456,878 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS":
  14162456,878 ops/s

Secondary result "org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 21,4%  42,9% org.openjdk.jmh.infra.Blackhole.consume
 18,4%  36,7% org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS
 10,2%  20,4% org.sample.jmh_generated.JMHBenchmark_05_DummyInvokeState_noInvocationReturnValueBS_jmhTest.noInvocationReturnValueBS_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS

# Run progress: 46,81% complete, ETA 00:01:32
# Fork: 1 of 1
# Warmup Iteration   1: 14748318,184 ops/s
Iteration   1: 13800590,250 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS":
  13800590,250 ops/s

Secondary result "org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 28,7%  57,3% org.openjdk.jmh.infra.Blackhole.consume
 14,0%  28,1% org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS
  7,3%  14,6% org.sample.jmh_generated.JMHBenchmark_05_DummyInvokeState_noInvocationlineReturnValueTS_jmhTest.noInvocationlineReturnValueTS_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.testInvocation

# Run progress: 48,94% complete, ETA 00:01:28
# Fork: 1 of 1
# Warmup Iteration   1: 15407079,660 ops/s
Iteration   1: 14790993,607 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocation":
  14790993,607 ops/s

Secondary result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocation:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 30,5%  61,1% org.sample.JMHBenchmark_05_DummyInvokeState._dummyMethod
 10,5%  21,1% org.sample.JMHBenchmark_05_DummyInvokeState.testInvocation
  8,9%  17,9% org.sample.jmh_generated.JMHBenchmark_05_DummyInvokeState_testInvocation_jmhTest.testInvocation_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS

# Run progress: 51,06% complete, ETA 00:01:25
# Fork: 1 of 1
# Warmup Iteration   1: 11271620,933 ops/s
Iteration   1: 10099606,484 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS":
  10099606,484 ops/s

Secondary result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 16,5%  33,0% org.openjdk.jmh.infra.Blackhole.consume
 14,9%  29,8% org.sample.JMHBenchmark_05_DummyInvokeState._dummyMethodReturnValueBS
  9,6%  19,1% org.sample.jmh_generated.JMHBenchmark_05_DummyInvokeState_testInvocationReturnValueBS_jmhTest.testInvocationReturnValueBS_thrpt_jmhStub
  9,0%  18,1% org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS

# Run progress: 53,19% complete, ETA 00:01:21
# Fork: 1 of 1
# Warmup Iteration   1: 10025464,995 ops/s
Iteration   1: 9931684,156 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS":
  9931684,156 ops/s

Secondary result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 18,8%  37,5% org.sample.JMHBenchmark_05_DummyInvokeState._dummyMethodReturnValueTS
 14,6%  29,2% org.openjdk.jmh.infra.Blackhole.consume
  9,9%  19,8% org.sample.jmh_generated.JMHBenchmark_05_DummyInvokeState_testInvocationReturnValueTS_jmhTest.testInvocationReturnValueTS_thrpt_jmhStub
  6,8%  13,5% org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke

# Run progress: 55,32% complete, ETA 00:01:17
# Fork: 1 of 1
# Warmup Iteration   1: 162581,138 ops/s
Iteration   1: 163792,374 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke":
  163792,374 ops/s

Secondary result "org.sample.JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 40,7%  81,4% org.sample.JMHBenchmark_06_SumCalcInvoke._sumMethod
  8,2%  16,5% org.sample.JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke
  0,5%   1,0% org.sample.jmh_generated.JMHBenchmark_06_SumCalcInvoke_SumCalcInvoke_jmhTest.SumCalcInvoke_thrpt_jmhStub
  0,5%   1,0% org.openjdk.jmh.infra.Blackhole.consume

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_06_SumCalcInvoke.baseline

# Run progress: 57,45% complete, ETA 00:01:14
# Fork: 1 of 1
# Warmup Iteration   1: 31890265,618 ops/s
Iteration   1: 31543972,395 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_06_SumCalcInvoke.baseline":
  31543972,395 ops/s

Secondary result "org.sample.JMHBenchmark_06_SumCalcInvoke.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 32,5%  64,9% org.sample.jmh_generated.JMHBenchmark_06_SumCalcInvoke_baseline_jmhTest.baseline_thrpt_jmhStub
 17,5%  35,1% org.sample.JMHBenchmark_06_SumCalcInvoke.baseline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc

# Run progress: 59,57% complete, ETA 00:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 205405,260 ops/s
Iteration   1: 203696,852 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc":
  203696,852 ops/s

Secondary result "org.sample.JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 48,9%  97,8% org.sample.JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc
  0,5%   1,1% org.openjdk.jmh.infra.Blackhole.consume
  0,5%   1,1% org.sample.jmh_generated.JMHBenchmark_06_SumCalcInvoke_noInvocationSumCalc_jmhTest.noInvocationSumCalc_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithDontInline

# Run progress: 61,70% complete, ETA 00:01:06
# Fork: 1 of 1
# Warmup Iteration   1: 157443,635 ops/s
Iteration   1: 165144,381 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithDontInline":
  165144,381 ops/s

Secondary result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithDontInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 44,8%  89,7% org.sample.JMHBenchmark_07_SumCalcWithCompileHint._hintNotInlineMethod
  4,6%   9,3% org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithDontInline
  0,5%   1,0% org.openjdk.jmh.infra.Blackhole.consume

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithInline

# Run progress: 63,83% complete, ETA 00:01:03
# Fork: 1 of 1
# Warmup Iteration   1: 162860,257 ops/s
Iteration   1: 152195,765 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithInline":
  152195,765 ops/s

Secondary result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 44,1%  88,3% org.sample.JMHBenchmark_07_SumCalcWithCompileHint._hintInlineMethod
  4,8%   9,6% org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithInline
  0,5%   1,1% org.sample.jmh_generated.JMHBenchmark_07_SumCalcWithCompileHint_SumCalcWithInline_jmhTest.SumCalcWithInline_thrpt_jmhStub
  0,5%   1,1% org.openjdk.jmh.infra.Blackhole.consume

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_07_SumCalcWithCompileHint.baseline

# Run progress: 65,96% complete, ETA 00:00:59
# Fork: 1 of 1
# Warmup Iteration   1: 30238288,410 ops/s
Iteration   1: 29056041,438 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.baseline":
  29056041,438 ops/s

Secondary result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 29,7%  59,4% org.sample.jmh_generated.JMHBenchmark_07_SumCalcWithCompileHint_baseline_jmhTest.baseline_thrpt_jmhStub
 20,3%  40,6% org.sample.JMHBenchmark_07_SumCalcWithCompileHint.baseline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_07_SumCalcWithCompileHint.noInvocationSumCalc

# Run progress: 68,09% complete, ETA 00:00:55
# Fork: 1 of 1
# Warmup Iteration   1: 200057,328 ops/s
Iteration   1: 207687,660 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.noInvocationSumCalc":
  207687,660 ops/s

Secondary result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.noInvocationSumCalc:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 49,0%  97,9% org.sample.JMHBenchmark_07_SumCalcWithCompileHint.noInvocationSumCalc
  1,0%   2,1% org.openjdk.jmh.infra.Blackhole.consume

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.baseline

# Run progress: 70,21% complete, ETA 00:00:52
# Fork: 1 of 1
# Warmup Iteration   1: 30080580,026 ops/s
Iteration   1: 30667288,500 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.baseline":
  30667288,500 ops/s

Secondary result "org.sample.JMHBenchmark_08_NumberOfSumCalc.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 29,3%  58,5% org.sample.jmh_generated.JMHBenchmark_08_NumberOfSumCalc_baseline_jmhTest.baseline_thrpt_jmhStub
 20,7%  41,5% org.sample.JMHBenchmark_08_NumberOfSumCalc.baseline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke

# Run progress: 72,34% complete, ETA 00:00:48
# Fork: 1 of 1
# Warmup Iteration   1: 61043,599 ops/s
Iteration   1: 66577,661 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke":
  66577,661 ops/s

Secondary result "org.sample.JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 43,8%  87,6% org.sample.JMHBenchmark_08_NumberOfSumCalc._longSumMethod
  5,2%  10,3% org.sample.JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke
  1,0%   2,1% org.openjdk.jmh.infra.Blackhole.consume

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc

# Run progress: 74,47% complete, ETA 00:00:44
# Fork: 1 of 1
# Warmup Iteration   1: 77235,040 ops/s
Iteration   1: 78489,336 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc":
  78489,336 ops/s

Secondary result "org.sample.JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 49,5%  99,0% org.sample.JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc
  0,5%   1,0% org.sample.jmh_generated.JMHBenchmark_08_NumberOfSumCalc_noInvocationNumberSumCalc_jmhTest.noInvocationNumberSumCalc_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke

# Run progress: 76,60% complete, ETA 00:00:40
# Fork: 1 of 1
# Warmup Iteration   1: 42143,012 ops/s
Iteration   1: 41978,993 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke":
  41978,993 ops/s

Secondary result "org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 10,4%  20,8% org.sample.JMHBenchmark_08_NumberOfSumCalc._sumMethod_3
 10,4%  20,8% org.sample.JMHBenchmark_08_NumberOfSumCalc._sumMethod_5
  8,9%  17,7% org.sample.JMHBenchmark_08_NumberOfSumCalc._sumMethod_1
  7,8%  15,6% org.sample.JMHBenchmark_08_NumberOfSumCalc._sumMethod_4
  7,8%  15,6% org.sample.JMHBenchmark_08_NumberOfSumCalc._sumMethod_2
  4,2%   8,3% org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke
  0,5%   1,0% org.openjdk.jmh.infra.Blackhole.consume

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested

# Run progress: 78,72% complete, ETA 00:00:37
# Fork: 1 of 1
# Warmup Iteration   1: 44868,811 ops/s
Iteration   1: 44647,170 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested":
  44647,170 ops/s

Secondary result "org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 39,6%  79,2% org.sample.JMHBenchmark_08_NumberOfSumCalc._sumMethod_5
  3,1%   6,3% org.sample.JMHBenchmark_08_NumberOfSumCalc._sumNestedMethod_1
  2,1%   4,2% org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested
  1,6%   3,1% org.sample.JMHBenchmark_08_NumberOfSumCalc._sumNestedMethod_3
  1,6%   3,1% org.sample.JMHBenchmark_08_NumberOfSumCalc._sumNestedMethod_2
  1,0%   2,1% org.sample.JMHBenchmark_08_NumberOfSumCalc._sumNestedMethod_4
  0,5%   1,0% org.openjdk.jmh.infra.Blackhole.consume
  0,5%   1,0% java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithDontInline

# Run progress: 80,85% complete, ETA 00:00:33
# Fork: 1 of 1
# Warmup Iteration   1: 35474,090 ops/s
Iteration   1: 34250,007 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithDontInline":
  34250,007 ops/s

Secondary result "org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithDontInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 13,9%  27,8% org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint._hintNotInlineMethod_4
  9,3%  18,6% org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint._hintNotInlineMethod_3
  8,2%  16,5% org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint._hintNotInlineMethod_2
  8,2%  16,5% org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint._hintNotInlineMethod_5
  7,7%  15,5% org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint._hintNotInlineMethod_1
  2,6%   5,2% org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithDontInline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithInline

# Run progress: 82,98% complete, ETA 00:00:29
# Fork: 1 of 1
# Warmup Iteration   1: 31687,231 ops/s
Iteration   1: 31013,267 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithInline":
  31013,267 ops/s

Secondary result "org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 13,0%  26,0% org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint._hintInlineMethod_1
 10,9%  21,9% org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint._hintInlineMethod_2
  9,4%  18,8% org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint._hintInlineMethod_3
  8,3%  16,7% org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint._hintInlineMethod_5
  6,8%  13,5% org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint._hintInlineMethod_4
  1,6%   3,1% org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithInline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.baseline

# Run progress: 85,11% complete, ETA 00:00:26
# Fork: 1 of 1
# Warmup Iteration   1: 37613432,916 ops/s
Iteration   1: 38779088,311 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.baseline":
  38779088,311 ops/s

Secondary result "org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 26,6%  53,1% org.sample.jmh_generated.JMHBenchmark_09_NumberOfSumCalcWithCompileHint_baseline_jmhTest.baseline_thrpt_jmhStub
 23,4%  46,9% org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.baseline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_10_longSumCalc.baseline

# Run progress: 87,23% complete, ETA 00:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 35864837,496 ops/s
Iteration   1: 36860955,181 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_10_longSumCalc.baseline":
  36860955,181 ops/s

Secondary result "org.sample.JMHBenchmark_10_longSumCalc.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 28,7%  57,4% org.sample.jmh_generated.JMHBenchmark_10_longSumCalc_baseline_jmhTest.baseline_thrpt_jmhStub
 21,3%  42,6% org.sample.JMHBenchmark_10_longSumCalc.baseline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_10_longSumCalc.longSumCalc

# Run progress: 89,36% complete, ETA 00:00:18
# Fork: 1 of 1
# Warmup Iteration   1: 6461,101 ops/s
Iteration   1: 6406,238 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_10_longSumCalc.longSumCalc":
  6406,238 ops/s

Secondary result "org.sample.JMHBenchmark_10_longSumCalc.longSumCalc:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 49,0%  97,9% org.sample.JMHBenchmark_10_longSumCalc._longSumCalcMethod
  1,0%   2,1% org.sample.JMHBenchmark_10_longSumCalc.longSumCalc

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc

# Run progress: 91,49% complete, ETA 00:00:14
# Fork: 1 of 1
# Warmup Iteration   1: 6639,612 ops/s
Iteration   1: 6603,289 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc":
  6603,289 ops/s

Secondary result "org.sample.JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.baseline

# Run progress: 93,62% complete, ETA 00:00:11
# Fork: 1 of 1
# Warmup Iteration   1: 30804349,079 ops/s
Iteration   1: 35841460,846 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.baseline":
  35841460,846 ops/s

Secondary result "org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 26,0%  52,1% org.sample.jmh_generated.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint_baseline_jmhTest.baseline_thrpt_jmhStub
 24,0%  47,9% org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.baseline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithDontInline

# Run progress: 95,74% complete, ETA 00:00:07
# Fork: 1 of 1
# Warmup Iteration   1: 1564,006 ops/s
Iteration   1: 1590,287 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithDontInline":
  1590,287 ops/s

Secondary result "org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithDontInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 48,4%  96,9% org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint._longNotInlineMethod
  0,5%   1,0% org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint._hintNotInlineMethod_3
  0,5%   1,0% org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint._hintNotInlineMethod_2
  0,5%   1,0% org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithDontInline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline -Xint
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithInline

# Run progress: 97,87% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 1586,632 ops/s
Iteration   1: 1562,225 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithInline":
  1562,225 ops/s

Secondary result "org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 47,3%  94,6% org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint._longInlineMethod
  0,5%   1,1% org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint._hintInlineMethod_3
  0,5%   1,1% org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint._hintInlineMethod_4
  0,5%   1,1% org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint._hintInlineMethod_1
  0,5%   1,1% org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint._hintInlineMethod_2
  0,5%   1,1% org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithInline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# Run complete. Total time: 00:02:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                      Mode  Cnt         Score   Error  Units
JMHBenchmark_01_DummyInvoke.baseline                                                                          thrpt       38498736,144          ops/s
JMHBenchmark_01_DummyInvoke.baseline:新tack                                                                   thrpt                NaN            ---
JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod                                                         thrpt       22113035,970          ops/s
JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod:新tack                                                  thrpt                NaN            ---
JMHBenchmark_02_InvokeWithReturn.baseline                                                                     thrpt       38499439,694          ops/s
JMHBenchmark_02_InvokeWithReturn.baseline:新tack                                                              thrpt                NaN            ---
JMHBenchmark_02_InvokeWithReturn.noInvocation                                                                 thrpt       12246560,132          ops/s
JMHBenchmark_02_InvokeWithReturn.noInvocation:新tack                                                          thrpt                NaN            ---
JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh                                              thrpt       11452008,682          ops/s
JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh:新tack                                       thrpt                NaN            ---
JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue                                     thrpt       11365324,044          ops/s
JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue:新tack                              thrpt                NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.baseline                                                           thrpt       37665075,983          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.baseline:新tack                                                    thrpt                NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.noInvocationWithReturnValue                                        thrpt       15274812,536          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.noInvocationWithReturnValue:新tack                                 thrpt                NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInline                        thrpt       21383821,547          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInline:新tack                 thrpt                NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInlineBh                      thrpt       11794918,590          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInlineBh:新tack               thrpt                NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInline                            thrpt       20100465,748          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInline:新tack                     thrpt                NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInlineBh                          thrpt       10604442,027          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInlineBh:新tack                   thrpt                NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintDontInline         thrpt       10655629,821          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintDontInline:新tack  thrpt                NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintInline             thrpt       10639608,555          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintInline:新tack      thrpt                NaN            ---
JMHBenchmark_04_DummyInvokeWithValue.baseline                                                                 thrpt       37386680,095          ops/s
JMHBenchmark_04_DummyInvokeWithValue.baseline:新tack                                                          thrpt                NaN            ---
JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue                                                  thrpt       13239486,113          ops/s
JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue:新tack                                           thrpt                NaN            ---
JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue                                          thrpt       14559630,093          ops/s
JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue:新tack                                   thrpt                NaN            ---
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod                                                thrpt       21520248,054          ops/s
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod:新tack                                         thrpt                NaN            ---
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue                                 thrpt       11745075,020          ops/s
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue:新tack                          thrpt                NaN            ---
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue                         thrpt       11611181,171          ops/s
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue:新tack                  thrpt                NaN            ---
JMHBenchmark_05_DummyInvokeState.baseline                                                                     thrpt       38850300,005          ops/s
JMHBenchmark_05_DummyInvokeState.baseline:新tack                                                              thrpt                NaN            ---
JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS                                                    thrpt       14162456,878          ops/s
JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS:新tack                                             thrpt                NaN            ---
JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS                                                thrpt       13800590,250          ops/s
JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS:新tack                                         thrpt                NaN            ---
JMHBenchmark_05_DummyInvokeState.testInvocation                                                               thrpt       14790993,607          ops/s
JMHBenchmark_05_DummyInvokeState.testInvocation:新tack                                                        thrpt                NaN            ---
JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS                                                  thrpt       10099606,484          ops/s
JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS:新tack                                           thrpt                NaN            ---
JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS                                                  thrpt        9931684,156          ops/s
JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS:新tack                                           thrpt                NaN            ---
JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke                                                                   thrpt         163792,374          ops/s
JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke:新tack                                                            thrpt                NaN            ---
JMHBenchmark_06_SumCalcInvoke.baseline                                                                        thrpt       31543972,395          ops/s
JMHBenchmark_06_SumCalcInvoke.baseline:新tack                                                                 thrpt                NaN            ---
JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc                                                             thrpt         203696,852          ops/s
JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc:新tack                                                      thrpt                NaN            ---
JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithDontInline                                                  thrpt         165144,381          ops/s
JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithDontInline:新tack                                           thrpt                NaN            ---
JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithInline                                                      thrpt         152195,765          ops/s
JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithInline:新tack                                               thrpt                NaN            ---
JMHBenchmark_07_SumCalcWithCompileHint.baseline                                                               thrpt       29056041,438          ops/s
JMHBenchmark_07_SumCalcWithCompileHint.baseline:新tack                                                        thrpt                NaN            ---
JMHBenchmark_07_SumCalcWithCompileHint.noInvocationSumCalc                                                    thrpt         207687,660          ops/s
JMHBenchmark_07_SumCalcWithCompileHint.noInvocationSumCalc:新tack                                             thrpt                NaN            ---
JMHBenchmark_08_NumberOfSumCalc.baseline                                                                      thrpt       30667288,500          ops/s
JMHBenchmark_08_NumberOfSumCalc.baseline:新tack                                                               thrpt                NaN            ---
JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke                                                             thrpt          66577,661          ops/s
JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke:新tack                                                      thrpt                NaN            ---
JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc                                                     thrpt          78489,336          ops/s
JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc:新tack                                              thrpt                NaN            ---
JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke                                                           thrpt          41978,993          ops/s
JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke:新tack                                                    thrpt                NaN            ---
JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested                                                     thrpt          44647,170          ops/s
JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested:新tack                                              thrpt                NaN            ---
JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithDontInline                                          thrpt          34250,007          ops/s
JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithDontInline:新tack                                   thrpt                NaN            ---
JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithInline                                              thrpt          31013,267          ops/s
JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithInline:新tack                                       thrpt                NaN            ---
JMHBenchmark_09_NumberOfSumCalcWithCompileHint.baseline                                                       thrpt       38779088,311          ops/s
JMHBenchmark_09_NumberOfSumCalcWithCompileHint.baseline:新tack                                                thrpt                NaN            ---
JMHBenchmark_10_longSumCalc.baseline                                                                          thrpt       36860955,181          ops/s
JMHBenchmark_10_longSumCalc.baseline:新tack                                                                   thrpt                NaN            ---
JMHBenchmark_10_longSumCalc.longSumCalc                                                                       thrpt           6406,238          ops/s
JMHBenchmark_10_longSumCalc.longSumCalc:新tack                                                                thrpt                NaN            ---
JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc                                                           thrpt           6603,289          ops/s
JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc:新tack                                                    thrpt                NaN            ---
JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.baseline                                           thrpt       35841460,846          ops/s
JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.baseline:新tack                                    thrpt                NaN            ---
JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithDontInline                              thrpt           1590,287          ops/s
JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithDontInline:新tack                       thrpt                NaN            ---
JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithInline                                  thrpt           1562,225          ops/s
JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithInline:新tack                           thrpt                NaN            ---

Benchmark result is saved to results/win-Xint+Inline-stack.txt
