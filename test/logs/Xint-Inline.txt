# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_01_DummyInvoke.baseline

# Run progress: 0.00% complete, ETA 00:14:30
# Fork: 1 of 1
# Warmup Iteration   1: 19829016.301 ops/s
# Warmup Iteration   2: 18503182.645 ops/s
# Warmup Iteration   3: 18821693.358 ops/s
# Warmup Iteration   4: 19119009.071 ops/s
# Warmup Iteration   5: 19662994.165 ops/s
Iteration   1: 19453207.941 ops/s
Iteration   2: 19493712.354 ops/s
Iteration   3: 19559025.223 ops/s
Iteration   4: 19349740.088 ops/s
Iteration   5: 19496461.802 ops/s


Result "org.sample.JMHBenchmark_01_DummyInvoke.baseline":
  19470429.482 ±(99.9%) 297843.576 ops/s [Average]
  (min, avg, max) = (19349740.088, 19470429.482, 19559025.223), stdev = 77349.031
  CI (99.9%): [19172585.905, 19768273.058] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod

# Run progress: 3.45% complete, ETA 00:17:08
# Fork: 1 of 1
# Warmup Iteration   1: 8275428.093 ops/s
# Warmup Iteration   2: 7909332.450 ops/s
# Warmup Iteration   3: 8023493.605 ops/s
# Warmup Iteration   4: 8178918.184 ops/s
# Warmup Iteration   5: 8054634.087 ops/s
Iteration   1: 8077291.162 ops/s
Iteration   2: 8023124.942 ops/s
Iteration   3: 8150295.781 ops/s
Iteration   4: 8135627.905 ops/s
Iteration   5: 8176633.054 ops/s


Result "org.sample.JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod":
  8112594.569 ±(99.9%) 238180.212 ops/s [Average]
  (min, avg, max) = (8023124.942, 8112594.569, 8176633.054), stdev = 61854.645
  CI (99.9%): [7874414.357, 8350774.781] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.baseline

# Run progress: 6.90% complete, ETA 00:16:30
# Fork: 1 of 1
# Warmup Iteration   1: 19991727.393 ops/s
# Warmup Iteration   2: 19190035.716 ops/s
# Warmup Iteration   3: 19734516.506 ops/s
# Warmup Iteration   4: 19831075.851 ops/s
# Warmup Iteration   5: 19708513.887 ops/s
Iteration   1: 19941450.998 ops/s
Iteration   2: 20089059.488 ops/s
Iteration   3: 19028884.501 ops/s
Iteration   4: 19536927.072 ops/s
Iteration   5: 19836359.954 ops/s


Result "org.sample.JMHBenchmark_02_InvokeWithReturn.baseline":
  19686536.403 ±(99.9%) 1615828.517 ops/s [Average]
  (min, avg, max) = (19028884.501, 19686536.403, 20089059.488), stdev = 419625.535
  CI (99.9%): [18070707.886, 21302364.920] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.noInvocation

# Run progress: 10.34% complete, ETA 00:15:53
# Fork: 1 of 1
# Warmup Iteration   1: 10242104.425 ops/s
# Warmup Iteration   2: 10099249.296 ops/s
# Warmup Iteration   3: 10082824.524 ops/s
# Warmup Iteration   4: 10110662.871 ops/s
# Warmup Iteration   5: 10121980.758 ops/s
Iteration   1: 10021389.064 ops/s
Iteration   2: 10206780.941 ops/s
Iteration   3: 10164631.401 ops/s
Iteration   4: 10198852.461 ops/s
Iteration   5: 10225670.634 ops/s


Result "org.sample.JMHBenchmark_02_InvokeWithReturn.noInvocation":
  10163464.900 ±(99.9%) 317444.760 ops/s [Average]
  (min, avg, max) = (10021389.064, 10163464.900, 10225670.634), stdev = 82439.396
  CI (99.9%): [9846020.140, 10480909.661] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh

# Run progress: 13.79% complete, ETA 00:15:16
# Fork: 1 of 1
# Warmup Iteration   1: 5730575.110 ops/s
# Warmup Iteration   2: 5809021.600 ops/s
# Warmup Iteration   3: 5757515.545 ops/s
# Warmup Iteration   4: 5650561.899 ops/s
# Warmup Iteration   5: 5587313.399 ops/s
Iteration   1: 5777421.102 ops/s
Iteration   2: 5718147.161 ops/s
Iteration   3: 5779655.346 ops/s
Iteration   4: 5752944.783 ops/s
Iteration   5: 5761528.945 ops/s


Result "org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh":
  5757939.468 ±(99.9%) 95732.699 ops/s [Average]
  (min, avg, max) = (5718147.161, 5757939.468, 5779655.346), stdev = 24861.478
  CI (99.9%): [5662206.769, 5853672.167] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue

# Run progress: 17.24% complete, ETA 00:14:39
# Fork: 1 of 1
# Warmup Iteration   1: 6178836.925 ops/s
# Warmup Iteration   2: 6003982.009 ops/s
# Warmup Iteration   3: 6117803.754 ops/s
# Warmup Iteration   4: 6239225.982 ops/s
# Warmup Iteration   5: 6170476.012 ops/s
Iteration   1: 6243183.008 ops/s
Iteration   2: 6096491.516 ops/s
Iteration   3: 6131205.372 ops/s
Iteration   4: 6165571.009 ops/s
Iteration   5: 6178023.722 ops/s


Result "org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue":
  6162894.926 ±(99.9%) 211749.170 ops/s [Average]
  (min, avg, max) = (6096491.516, 6162894.926, 6243183.008), stdev = 54990.587
  CI (99.9%): [5951145.756, 6374644.096] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.baseline

# Run progress: 20.69% complete, ETA 00:14:02
# Fork: 1 of 1
# Warmup Iteration   1: 19798120.508 ops/s
# Warmup Iteration   2: 20036572.739 ops/s
# Warmup Iteration   3: 19325853.470 ops/s
# Warmup Iteration   4: 19516616.787 ops/s
# Warmup Iteration   5: 19997314.640 ops/s
Iteration   1: 20080548.874 ops/s
Iteration   2: 19793770.326 ops/s
Iteration   3: 19895059.069 ops/s
Iteration   4: 20099289.531 ops/s
Iteration   5: 19899631.949 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.baseline":
  19953659.950 ±(99.9%) 506570.297 ops/s [Average]
  (min, avg, max) = (19793770.326, 19953659.950, 20099289.531), stdev = 131554.697
  CI (99.9%): [19447089.653, 20460230.247] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue

# Run progress: 24.14% complete, ETA 00:13:25
# Fork: 1 of 1
# Warmup Iteration   1: 9703593.267 ops/s
# Warmup Iteration   2: 9794969.635 ops/s
# Warmup Iteration   3: 9685357.721 ops/s
# Warmup Iteration   4: 9901558.880 ops/s
# Warmup Iteration   5: 9804404.096 ops/s
Iteration   1: 9257063.970 ops/s
Iteration   2: 8802497.194 ops/s
Iteration   3: 8979063.554 ops/s
Iteration   4: 8642198.766 ops/s
Iteration   5: 9254556.200 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue":
  8987075.937 ±(99.9%) 1050162.101 ops/s [Average]
  (min, avg, max) = (8642198.766, 8987075.937, 9257063.970), stdev = 272723.763
  CI (99.9%): [7936913.836, 10037238.037] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue

# Run progress: 27.59% complete, ETA 00:12:49
# Fork: 1 of 1
# Warmup Iteration   1: 8769761.207 ops/s
# Warmup Iteration   2: 9022855.716 ops/s
# Warmup Iteration   3: 8636164.192 ops/s
# Warmup Iteration   4: 8342796.946 ops/s
# Warmup Iteration   5: 7167166.329 ops/s
Iteration   1: 7555224.036 ops/s
Iteration   2: 8961942.097 ops/s
Iteration   3: 8923330.715 ops/s
Iteration   4: 9067865.654 ops/s
Iteration   5: 7765059.652 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue":
  8454684.431 ±(99.9%) 2814885.390 ops/s [Average]
  (min, avg, max) = (7555224.036, 8454684.431, 9067865.654), stdev = 731016.797
  CI (99.9%): [5639799.040, 11269569.821] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod

# Run progress: 31.03% complete, ETA 00:12:12
# Fork: 1 of 1
# Warmup Iteration   1: 6759725.725 ops/s
# Warmup Iteration   2: 7140817.161 ops/s
# Warmup Iteration   3: 7127975.471 ops/s
# Warmup Iteration   4: 7049109.403 ops/s
# Warmup Iteration   5: 6723776.032 ops/s
Iteration   1: 6975691.101 ops/s
Iteration   2: 7131418.128 ops/s
Iteration   3: 6887637.604 ops/s
Iteration   4: 5875217.016 ops/s
Iteration   5: 6757742.736 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod":
  6725541.317 ±(99.9%) 1903708.720 ops/s [Average]
  (min, avg, max) = (5875217.016, 6725541.317, 7131418.128), stdev = 494387.109
  CI (99.9%): [4821832.597, 8629250.037] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue

# Run progress: 34.48% complete, ETA 00:11:36
# Fork: 1 of 1
# Warmup Iteration   1: 4388690.645 ops/s
# Warmup Iteration   2: 4612156.021 ops/s
# Warmup Iteration   3: 4420992.482 ops/s
# Warmup Iteration   4: 4569621.635 ops/s
# Warmup Iteration   5: 4648109.158 ops/s
Iteration   1: 4383508.235 ops/s
Iteration   2: 4536932.344 ops/s
Iteration   3: 4452417.399 ops/s
Iteration   4: 4501735.462 ops/s
Iteration   5: 4583083.270 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue":
  4491535.342 ±(99.9%) 296687.195 ops/s [Average]
  (min, avg, max) = (4383508.235, 4491535.342, 4583083.270), stdev = 77048.722
  CI (99.9%): [4194848.147, 4788222.537] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue

# Run progress: 37.93% complete, ETA 00:10:59
# Fork: 1 of 1
# Warmup Iteration   1: 4769042.270 ops/s
# Warmup Iteration   2: 5300376.220 ops/s
# Warmup Iteration   3: 4897319.444 ops/s
# Warmup Iteration   4: 4902478.626 ops/s
# Warmup Iteration   5: 4637747.681 ops/s
Iteration   1: 5091999.500 ops/s
Iteration   2: 5017517.092 ops/s
Iteration   3: 5022695.566 ops/s
Iteration   4: 4928604.204 ops/s
Iteration   5: 4854935.119 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue":
  4983150.296 ±(99.9%) 355050.785 ops/s [Average]
  (min, avg, max) = (4854935.119, 4983150.296, 5091999.500), stdev = 92205.561
  CI (99.9%): [4628099.512, 5338201.081] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.baseline

# Run progress: 41.38% complete, ETA 00:10:22
# Fork: 1 of 1
# Warmup Iteration   1: 17965365.660 ops/s
# Warmup Iteration   2: 17093284.294 ops/s
# Warmup Iteration   3: 15354633.757 ops/s
# Warmup Iteration   4: 15734023.118 ops/s
# Warmup Iteration   5: 16260768.430 ops/s
Iteration   1: 16504920.955 ops/s
Iteration   2: 17857521.832 ops/s
Iteration   3: 18345263.886 ops/s
Iteration   4: 17853449.898 ops/s
Iteration   5: 18202685.248 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.baseline":
  17752768.364 ±(99.9%) 2811042.175 ops/s [Average]
  (min, avg, max) = (16504920.955, 17752768.364, 18345263.886), stdev = 730018.726
  CI (99.9%): [14941726.189, 20563810.539] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS

# Run progress: 44.83% complete, ETA 00:09:46
# Fork: 1 of 1
# Warmup Iteration   1: 8700565.260 ops/s
# Warmup Iteration   2: 8435010.859 ops/s
# Warmup Iteration   3: 8300923.309 ops/s
# Warmup Iteration   4: 8558686.154 ops/s
# Warmup Iteration   5: 8306321.648 ops/s
Iteration   1: 8411578.313 ops/s
Iteration   2: 8333646.288 ops/s
Iteration   3: 8310551.449 ops/s
Iteration   4: 8473366.626 ops/s
Iteration   5: 8161285.306 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS":
  8338085.597 ±(99.9%) 454548.559 ops/s [Average]
  (min, avg, max) = (8161285.306, 8338085.597, 8473366.626), stdev = 118044.817
  CI (99.9%): [7883537.037, 8792634.156] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS

# Run progress: 48.28% complete, ETA 00:09:09
# Fork: 1 of 1
# Warmup Iteration   1: 8577590.774 ops/s
# Warmup Iteration   2: 8357929.316 ops/s
# Warmup Iteration   3: 8737449.408 ops/s
# Warmup Iteration   4: 8388225.908 ops/s
# Warmup Iteration   5: 8409676.440 ops/s
Iteration   1: 8573577.603 ops/s
Iteration   2: 8496788.773 ops/s
Iteration   3: 8568129.200 ops/s
Iteration   4: 8640254.099 ops/s
Iteration   5: 8570200.475 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS":
  8569790.030 ±(99.9%) 195509.228 ops/s [Average]
  (min, avg, max) = (8496788.773, 8569790.030, 8640254.099), stdev = 50773.126
  CI (99.9%): [8374280.802, 8765299.258] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.testInvocation

# Run progress: 51.72% complete, ETA 00:08:33
# Fork: 1 of 1
# Warmup Iteration   1: 7411129.167 ops/s
# Warmup Iteration   2: 7345773.575 ops/s
# Warmup Iteration   3: 7214688.223 ops/s
# Warmup Iteration   4: 7341234.886 ops/s
# Warmup Iteration   5: 7423714.905 ops/s
Iteration   1: 7413615.318 ops/s
Iteration   2: 7197333.526 ops/s
Iteration   3: 7528842.382 ops/s
Iteration   4: 6823738.719 ops/s
Iteration   5: 7130731.485 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocation":
  7218852.286 ±(99.9%) 1051672.756 ops/s [Average]
  (min, avg, max) = (6823738.719, 7218852.286, 7528842.382), stdev = 273116.075
  CI (99.9%): [6167179.530, 8270525.042] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS

# Run progress: 55.17% complete, ETA 00:07:56
# Fork: 1 of 1
# Warmup Iteration   1: 4322638.495 ops/s
# Warmup Iteration   2: 4386851.469 ops/s
# Warmup Iteration   3: 4188501.519 ops/s
# Warmup Iteration   4: 4196264.325 ops/s
# Warmup Iteration   5: 4397407.991 ops/s
Iteration   1: 4364262.620 ops/s
Iteration   2: 4482618.534 ops/s
Iteration   3: 4598169.884 ops/s
Iteration   4: 4496963.093 ops/s
Iteration   5: 4477407.963 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS":
  4483884.419 ±(99.9%) 319772.394 ops/s [Average]
  (min, avg, max) = (4364262.620, 4483884.419, 4598169.884), stdev = 83043.875
  CI (99.9%): [4164112.024, 4803656.813] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS

# Run progress: 58.62% complete, ETA 00:07:19
# Fork: 1 of 1
# Warmup Iteration   1: 4262668.384 ops/s
# Warmup Iteration   2: 4288116.984 ops/s
# Warmup Iteration   3: 4498889.937 ops/s
# Warmup Iteration   4: 4453738.921 ops/s
# Warmup Iteration   5: 4379578.020 ops/s
Iteration   1: 4362399.413 ops/s
Iteration   2: 4349116.736 ops/s
Iteration   3: 4352261.079 ops/s
Iteration   4: 4528087.332 ops/s
Iteration   5: 4439267.988 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS":
  4406226.510 ±(99.9%) 298495.746 ops/s [Average]
  (min, avg, max) = (4349116.736, 4406226.510, 4528087.332), stdev = 77518.397
  CI (99.9%): [4107730.763, 4704722.256] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke

# Run progress: 62.07% complete, ETA 00:06:43
# Fork: 1 of 1
# Warmup Iteration   1: 81768.509 ops/s
# Warmup Iteration   2: 81682.694 ops/s
# Warmup Iteration   3: 81600.124 ops/s
# Warmup Iteration   4: 80965.855 ops/s
# Warmup Iteration   5: 77752.853 ops/s
Iteration   1: 82023.998 ops/s
Iteration   2: 80002.175 ops/s
Iteration   3: 81392.548 ops/s
Iteration   4: 82497.416 ops/s
Iteration   5: 82043.017 ops/s


Result "org.sample.JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke":
  81591.831 ±(99.9%) 3741.838 ops/s [Average]
  (min, avg, max) = (80002.175, 81591.831, 82497.416), stdev = 971.743
  CI (99.9%): [77849.993, 85333.669] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_06_SumCalcInvoke.baseline

# Run progress: 65.52% complete, ETA 00:06:06
# Fork: 1 of 1
# Warmup Iteration   1: 17917190.042 ops/s
# Warmup Iteration   2: 17628685.010 ops/s
# Warmup Iteration   3: 16736228.008 ops/s
# Warmup Iteration   4: 15551898.214 ops/s
# Warmup Iteration   5: 16344710.581 ops/s
Iteration   1: 16582614.876 ops/s
Iteration   2: 17719260.649 ops/s
Iteration   3: 15963302.211 ops/s
Iteration   4: 17343973.412 ops/s
Iteration   5: 17951247.326 ops/s


Result "org.sample.JMHBenchmark_06_SumCalcInvoke.baseline":
  17112079.695 ±(99.9%) 3179212.297 ops/s [Average]
  (min, avg, max) = (15963302.211, 17112079.695, 17951247.326), stdev = 825631.338
  CI (99.9%): [13932867.398, 20291291.992] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc

# Run progress: 68.97% complete, ETA 00:05:29
# Fork: 1 of 1
# Warmup Iteration   1: 284490.710 ops/s
# Warmup Iteration   2: 278303.500 ops/s
# Warmup Iteration   3: 279640.245 ops/s
# Warmup Iteration   4: 281425.939 ops/s
# Warmup Iteration   5: 265248.354 ops/s
Iteration   1: 264914.189 ops/s
Iteration   2: 278984.314 ops/s
Iteration   3: 274356.562 ops/s
Iteration   4: 266347.181 ops/s
Iteration   5: 277687.632 ops/s


Result "org.sample.JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc":
  272457.976 ±(99.9%) 24939.984 ops/s [Average]
  (min, avg, max) = (264914.189, 272457.976, 278984.314), stdev = 6476.835
  CI (99.9%): [247517.991, 297397.960] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.baseline

# Run progress: 72.41% complete, ETA 00:04:53
# Fork: 1 of 1
# Warmup Iteration   1: 18269720.423 ops/s
# Warmup Iteration   2: 18732323.905 ops/s
# Warmup Iteration   3: 17790285.892 ops/s
# Warmup Iteration   4: 18297537.516 ops/s
# Warmup Iteration   5: 18255897.217 ops/s
Iteration   1: 17343076.811 ops/s
Iteration   2: 17849482.943 ops/s
Iteration   3: 17520545.997 ops/s
Iteration   4: 15255698.017 ops/s
Iteration   5: 15876986.724 ops/s


Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.baseline":
  16769158.098 ±(99.9%) 4368232.409 ops/s [Average]
  (min, avg, max) = (15255698.017, 16769158.098, 17849482.943), stdev = 1134416.085
  CI (99.9%): [12400925.689, 21137390.508] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke

# Run progress: 75.86% complete, ETA 00:04:16
# Fork: 1 of 1
# Warmup Iteration   1: 42959.652 ops/s
# Warmup Iteration   2: 41745.518 ops/s
# Warmup Iteration   3: 37382.178 ops/s
# Warmup Iteration   4: 40502.880 ops/s
# Warmup Iteration   5: 37313.209 ops/s
Iteration   1: 34619.559 ops/s
Iteration   2: 39079.381 ops/s
Iteration   3: 44716.151 ops/s
Iteration   4: 42886.944 ops/s
Iteration   5: 43553.842 ops/s


Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke":
  40971.175 ±(99.9%) 15910.092 ops/s [Average]
  (min, avg, max) = (34619.559, 40971.175, 44716.151), stdev = 4131.800
  CI (99.9%): [25061.083, 56881.267] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc

# Run progress: 79.31% complete, ETA 00:03:40
# Fork: 1 of 1
# Warmup Iteration   1: 56024.963 ops/s
# Warmup Iteration   2: 57027.790 ops/s
# Warmup Iteration   3: 55400.620 ops/s
# Warmup Iteration   4: 56737.934 ops/s
# Warmup Iteration   5: 55149.874 ops/s
Iteration   1: 56594.632 ops/s
Iteration   2: 45336.298 ops/s
Iteration   3: 56406.959 ops/s
Iteration   4: 56784.406 ops/s
Iteration   5: 56667.533 ops/s


Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc":
  54357.966 ±(99.9%) 19426.990 ops/s [Average]
  (min, avg, max) = (45336.298, 54357.966, 56784.406), stdev = 5045.128
  CI (99.9%): [34930.976, 73784.956] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke

# Run progress: 82.76% complete, ETA 00:03:03
# Fork: 1 of 1
# Warmup Iteration   1: 17859.093 ops/s
# Warmup Iteration   2: 17621.226 ops/s
# Warmup Iteration   3: 17862.598 ops/s
# Warmup Iteration   4: 18580.147 ops/s
# Warmup Iteration   5: 18468.295 ops/s
Iteration   1: 17775.593 ops/s
Iteration   2: 18521.644 ops/s
Iteration   3: 17902.983 ops/s
Iteration   4: 18088.698 ops/s
Iteration   5: 18287.869 ops/s


Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke":
  18115.357 ±(99.9%) 1148.891 ops/s [Average]
  (min, avg, max) = (17775.593, 18115.357, 18521.644), stdev = 298.363
  CI (99.9%): [16966.467, 19264.248] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested

# Run progress: 86.21% complete, ETA 00:02:26
# Fork: 1 of 1
# Warmup Iteration   1: 20071.819 ops/s
# Warmup Iteration   2: 19414.435 ops/s
# Warmup Iteration   3: 20107.214 ops/s
# Warmup Iteration   4: 20200.652 ops/s
# Warmup Iteration   5: 20634.131 ops/s
Iteration   1: 20233.234 ops/s
Iteration   2: 19575.205 ops/s
Iteration   3: 19889.438 ops/s
Iteration   4: 20567.072 ops/s
Iteration   5: 20609.297 ops/s


Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested":
  20174.850 ±(99.9%) 1708.038 ops/s [Average]
  (min, avg, max) = (19575.205, 20174.850, 20609.297), stdev = 443.572
  CI (99.9%): [18466.811, 21882.888] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_10_longSumCalc.baseline

# Run progress: 89.66% complete, ETA 00:01:50
# Fork: 1 of 1
# Warmup Iteration   1: 17946682.456 ops/s
# Warmup Iteration   2: 17741730.326 ops/s
# Warmup Iteration   3: 17347244.909 ops/s
# Warmup Iteration   4: 17476449.741 ops/s
# Warmup Iteration   5: 18292846.785 ops/s
Iteration   1: 18466900.823 ops/s
Iteration   2: 18522543.354 ops/s
Iteration   3: 18516005.955 ops/s
Iteration   4: 17892811.402 ops/s
Iteration   5: 18649975.257 ops/s


Result "org.sample.JMHBenchmark_10_longSumCalc.baseline":
  18409647.358 ±(99.9%) 1142630.364 ops/s [Average]
  (min, avg, max) = (17892811.402, 18409647.358, 18649975.257), stdev = 296737.477
  CI (99.9%): [17267016.995, 19552277.722] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_10_longSumCalc.longSumCalc

# Run progress: 93.10% complete, ETA 00:01:13
# Fork: 1 of 1
# Warmup Iteration   1: 5530.864 ops/s
# Warmup Iteration   2: 5396.376 ops/s
# Warmup Iteration   3: 5389.428 ops/s
# Warmup Iteration   4: 5328.032 ops/s
# Warmup Iteration   5: 5457.554 ops/s
Iteration   1: 5489.695 ops/s
Iteration   2: 5384.767 ops/s
Iteration   3: 5413.122 ops/s
Iteration   4: 5478.898 ops/s
Iteration   5: 5350.765 ops/s


Result "org.sample.JMHBenchmark_10_longSumCalc.longSumCalc":
  5423.449 ±(99.9%) 230.630 ops/s [Average]
  (min, avg, max) = (5350.765, 5423.449, 5489.695), stdev = 59.894
  CI (99.9%): [5192.820, 5654.079] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -Xint
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc

# Run progress: 96.55% complete, ETA 00:00:36
# Fork: 1 of 1
# Warmup Iteration   1: 6256.286 ops/s
# Warmup Iteration   2: 6265.599 ops/s
# Warmup Iteration   3: 6189.374 ops/s
# Warmup Iteration   4: 6303.319 ops/s
# Warmup Iteration   5: 6012.235 ops/s
Iteration   1: 6020.742 ops/s
Iteration   2: 6181.699 ops/s
Iteration   3: 6071.875 ops/s
Iteration   4: 6058.628 ops/s
Iteration   5: 6075.628 ops/s


Result "org.sample.JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc":
  6081.715 ±(99.9%) 230.889 ops/s [Average]
  (min, avg, max) = (6020.742, 6081.715, 6181.699), stdev = 59.961
  CI (99.9%): [5850.825, 6312.604] (assumes normal distribution)


# Run complete. Total time: 00:17:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt         Score         Error  Units
JMHBenchmark_01_DummyInvoke.baseline                                                   thrpt    5  19470429.482 ±  297843.576  ops/s
JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod                                  thrpt    5   8112594.569 ±  238180.212  ops/s
JMHBenchmark_02_InvokeWithReturn.baseline                                              thrpt    5  19686536.403 ± 1615828.517  ops/s
JMHBenchmark_02_InvokeWithReturn.noInvocation                                          thrpt    5  10163464.900 ±  317444.760  ops/s
JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh                       thrpt    5   5757939.468 ±   95732.699  ops/s
JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue              thrpt    5   6162894.926 ±  211749.170  ops/s
JMHBenchmark_04_DummyInvokeWithValue.baseline                                          thrpt    5  19953659.950 ±  506570.297  ops/s
JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue                           thrpt    5   8987075.937 ± 1050162.101  ops/s
JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue                   thrpt    5   8454684.431 ± 2814885.390  ops/s
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod                         thrpt    5   6725541.317 ± 1903708.720  ops/s
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue          thrpt    5   4491535.342 ±  296687.195  ops/s
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue  thrpt    5   4983150.296 ±  355050.785  ops/s
JMHBenchmark_05_DummyInvokeState.baseline                                              thrpt    5  17752768.364 ± 2811042.175  ops/s
JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS                             thrpt    5   8338085.597 ±  454548.559  ops/s
JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS                         thrpt    5   8569790.030 ±  195509.228  ops/s
JMHBenchmark_05_DummyInvokeState.testInvocation                                        thrpt    5   7218852.286 ± 1051672.756  ops/s
JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS                           thrpt    5   4483884.419 ±  319772.394  ops/s
JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS                           thrpt    5   4406226.510 ±  298495.746  ops/s
JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke                                            thrpt    5     81591.831 ±    3741.838  ops/s
JMHBenchmark_06_SumCalcInvoke.baseline                                                 thrpt    5  17112079.695 ± 3179212.297  ops/s
JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc                                      thrpt    5    272457.976 ±   24939.984  ops/s
JMHBenchmark_08_NumberOfSumCalc.baseline                                               thrpt    5  16769158.098 ± 4368232.409  ops/s
JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke                                      thrpt    5     40971.175 ±   15910.092  ops/s
JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc                              thrpt    5     54357.966 ±   19426.990  ops/s
JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke                                    thrpt    5     18115.357 ±    1148.891  ops/s
JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested                              thrpt    5     20174.850 ±    1708.038  ops/s
JMHBenchmark_10_longSumCalc.baseline                                                   thrpt    5  18409647.358 ± 1142630.364  ops/s
JMHBenchmark_10_longSumCalc.longSumCalc                                                thrpt    5      5423.449 ±     230.630  ops/s
JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc                                    thrpt    5      6081.715 ±     230.889  ops/s

Benchmark result is saved to results/Xint-Inline.txt
