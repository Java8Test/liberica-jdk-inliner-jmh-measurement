# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_01_DummyInvoke.baseline

# Run progress: 0,00% complete, ETA 00:01:34
# Fork: 1 of 1
# Warmup Iteration   1: 1910809354,975 ops/s
Iteration   1: 1890673815,337 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_01_DummyInvoke.baseline":
  1890673815,337 ops/s

Secondary result "org.sample.JMHBenchmark_01_DummyInvoke.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_01_DummyInvoke_baseline_jmhTest.baseline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod

# Run progress: 2,13% complete, ETA 00:02:53
# Fork: 1 of 1
# Warmup Iteration   1: 1907810121,150 ops/s
Iteration   1: 1848766471,296 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod":
  1848766471,296 ops/s

Secondary result "org.sample.JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_01_DummyInvoke_testInvocationDummyMethod_jmhTest.testInvocationDummyMethod_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.baseline

# Run progress: 4,26% complete, ETA 00:02:48
# Fork: 1 of 1
# Warmup Iteration   1: 1894916227,028 ops/s
Iteration   1: 1902996369,721 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_02_InvokeWithReturn.baseline":
  1902996369,721 ops/s

Secondary result "org.sample.JMHBenchmark_02_InvokeWithReturn.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_02_InvokeWithReturn_baseline_jmhTest.baseline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.noInvocation

# Run progress: 6,38% complete, ETA 00:02:44
# Fork: 1 of 1
# Warmup Iteration   1: 270701533,061 ops/s
Iteration   1: 258056156,005 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_02_InvokeWithReturn.noInvocation":
  258056156,005 ops/s

Secondary result "org.sample.JMHBenchmark_02_InvokeWithReturn.noInvocation:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_02_InvokeWithReturn_noInvocation_jmhTest.noInvocation_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh

# Run progress: 8,51% complete, ETA 00:02:40
# Fork: 1 of 1
# Warmup Iteration   1: 266091296,915 ops/s
Iteration   1: 261089263,101 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh":
  261089263,101 ops/s

Secondary result "org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 36,6%  73,2% org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh
 13,4%  26,8% org.sample.jmh_generated.JMHBenchmark_02_InvokeWithReturn_testInvocationDummyMethodWithBh_jmhTest.testInvocationDummyMethodWithBh_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue

# Run progress: 10,64% complete, ETA 00:02:36
# Fork: 1 of 1
# Warmup Iteration   1: 269970193,099 ops/s
Iteration   1: 257044328,927 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue":
  257044328,927 ops/s

Secondary result "org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_02_InvokeWithReturn_testInvocationDummyMethodWithReturnValue_jmhTest.testInvocationDummyMethodWithReturnValue_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.baseline

# Run progress: 12,77% complete, ETA 00:02:32
# Fork: 1 of 1
# Warmup Iteration   1: 1877622030,653 ops/s
Iteration   1: 1891169203,220 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.baseline":
  1891169203,220 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_baseline_jmhTest.baseline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.noInvocationWithReturnValue

# Run progress: 14,89% complete, ETA 00:02:28
# Fork: 1 of 1
# Warmup Iteration   1: 268481521,511 ops/s
Iteration   1: 259029010,052 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.noInvocationWithReturnValue":
  259029010,052 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.noInvocationWithReturnValue:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         TIMED_WAITING
 49,5%         RUNNABLE
  0,5%         WAITING

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait

....[Thread state: RUNNABLE]........................................................................
 49,5% 100,0% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_noInvocationWithReturnValue_jmhTest.noInvocationWithReturnValue_thrpt_jmhStub

....[Thread state: WAITING].........................................................................
  0,5% 100,0% jdk.internal.misc.Unsafe.park



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInline

# Run progress: 17,02% complete, ETA 00:02:24
# Fork: 1 of 1
# Warmup Iteration   1: 401442408,328 ops/s
Iteration   1: 377079333,032 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInline":
  377079333,032 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 32,1%  64,2% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInline
 17,9%  35,8% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_testInvocationDummyMethodWithHintDontInline_jmhTest.testInvocationDummyMethodWithHintDontInline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInlineBh

# Run progress: 19,15% complete, ETA 00:02:20
# Fork: 1 of 1
# Warmup Iteration   1: 167792267,815 ops/s
Iteration   1: 181520892,155 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInlineBh":
  181520892,155 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInlineBh:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 46,4%  92,9% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInlineBh
  3,6%   7,1% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_testInvocationDummyMethodWithHintDontInlineBh_jmhTest.testInvocationDummyMethodWithHintDontInlineBh_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInline

# Run progress: 21,28% complete, ETA 00:02:17
# Fork: 1 of 1
# Warmup Iteration   1: 1912509551,647 ops/s
Iteration   1: 1875902272,968 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInline":
  1875902272,968 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         TIMED_WAITING
 49,5%         RUNNABLE
  0,5%         WAITING

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait

....[Thread state: RUNNABLE]........................................................................
 49,5% 100,0% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_testInvocationDummyMethodWithHintInline_jmhTest.testInvocationDummyMethodWithHintInline_thrpt_jmhStub

....[Thread state: WAITING].........................................................................
  0,5% 100,0% jdk.internal.misc.Unsafe.park



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInlineBh

# Run progress: 23,40% complete, ETA 00:02:13
# Fork: 1 of 1
# Warmup Iteration   1: 258895610,645 ops/s
Iteration   1: 258866433,423 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInlineBh":
  258866433,423 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInlineBh:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 35,0%  70,0% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInlineBh
 15,0%  30,0% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_testInvocationDummyMethodWithHintInlineBh_jmhTest.testInvocationDummyMethodWithHintInlineBh_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintDontInline

# Run progress: 25,53% complete, ETA 00:02:09
# Fork: 1 of 1
# Warmup Iteration   1: 184335845,294 ops/s
Iteration   1: 183978926,417 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintDontInline":
  183978926,417 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintDontInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 28,6%  57,1% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_testInvocationDummyMethodWithReturnValueWithHintDontInline_jmhTest.testInvocationDummyMethodWithReturnValueWithHintDontInline_thrpt_jmhStub
 21,4%  42,9% org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintDontInline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintInline

# Run progress: 27,66% complete, ETA 00:02:06
# Fork: 1 of 1
# Warmup Iteration   1: 269311066,695 ops/s
Iteration   1: 261275263,917 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintInline":
  261275263,917 ops/s

Secondary result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_03_DummyInvokeWithCompileHint_testInvocationDummyMethodWithReturnValueWithHintInline_jmhTest.testInvocationDummyMethodWithReturnValueWithHintInline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.baseline

# Run progress: 29,79% complete, ETA 00:02:02
# Fork: 1 of 1
# Warmup Iteration   1: 1931690815,139 ops/s
Iteration   1: 1833990722,115 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.baseline":
  1833990722,115 ops/s

Secondary result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_04_DummyInvokeWithValue_baseline_jmhTest.baseline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue

# Run progress: 31,91% complete, ETA 00:01:58
# Fork: 1 of 1
# Warmup Iteration   1: 284442885,835 ops/s
Iteration   1: 278073479,260 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue":
  278073479,260 ops/s

Secondary result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         TIMED_WAITING
 49,5%         RUNNABLE
  0,5%         WAITING

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait

....[Thread state: RUNNABLE]........................................................................
 49,5% 100,0% org.sample.jmh_generated.JMHBenchmark_04_DummyInvokeWithValue_noInvocationReturnValue_jmhTest.noInvocationReturnValue_thrpt_jmhStub

....[Thread state: WAITING].........................................................................
  0,5% 100,0% jdk.internal.misc.Unsafe.park



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue

# Run progress: 34,04% complete, ETA 00:01:54
# Fork: 1 of 1
# Warmup Iteration   1: 286114511,151 ops/s
Iteration   1: 237750472,557 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue":
  237750472,557 ops/s

Secondary result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 49,4%  98,8% org.sample.jmh_generated.JMHBenchmark_04_DummyInvokeWithValue_noInvocationReturnVolatileValue_jmhTest.noInvocationReturnVolatileValue_thrpt_jmhStub
  0,6%   1,2% jdk.internal.misc.Unsafe.compareAndSetInt

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod

# Run progress: 36,17% complete, ETA 00:01:51
# Fork: 1 of 1
# Warmup Iteration   1: 1813094287,111 ops/s
Iteration   1: 1836772108,117 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod":
  1836772108,117 ops/s

Secondary result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_04_DummyInvokeWithValue_testInvocationDummyMethod_jmhTest.testInvocationDummyMethod_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue

# Run progress: 38,30% complete, ETA 00:01:47
# Fork: 1 of 1
# Warmup Iteration   1: 279696057,214 ops/s
Iteration   1: 295150010,268 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue":
  295150010,268 ops/s

Secondary result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_04_DummyInvokeWithValue_testInvocationDummyMethodWithReturnValue_jmhTest.testInvocationDummyMethodWithReturnValue_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue

# Run progress: 40,43% complete, ETA 00:01:43
# Fork: 1 of 1
# Warmup Iteration   1: 273714199,930 ops/s
Iteration   1: 287493671,344 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue":
  287493671,344 ops/s

Secondary result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_04_DummyInvokeWithValue_testInvocationDummyMethodWithReturnVolatileValue_jmhTest.testInvocationDummyMethodWithReturnVolatileValue_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.baseline

# Run progress: 42,55% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 1875148985,179 ops/s
Iteration   1: 1832059686,012 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_05_DummyInvokeState.baseline":
  1832059686,012 ops/s

Secondary result "org.sample.JMHBenchmark_05_DummyInvokeState.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_05_DummyInvokeState_baseline_jmhTest.baseline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS

# Run progress: 44,68% complete, ETA 00:01:36
# Fork: 1 of 1
# Warmup Iteration   1: 282186233,455 ops/s
Iteration   1: 284457971,871 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS":
  284457971,871 ops/s

Secondary result "org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_05_DummyInvokeState_noInvocationReturnValueBS_jmhTest.noInvocationReturnValueBS_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS

# Run progress: 46,81% complete, ETA 00:01:32
# Fork: 1 of 1
# Warmup Iteration   1: 264042528,810 ops/s
Iteration   1: 251596070,515 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS":
  251596070,515 ops/s

Secondary result "org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 49,5%  98,9% org.sample.jmh_generated.JMHBenchmark_05_DummyInvokeState_noInvocationlineReturnValueTS_jmhTest.noInvocationlineReturnValueTS_thrpt_jmhStub
  0,5%   1,1% java.util.concurrent.atomic.AtomicInteger.get

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.testInvocation

# Run progress: 48,94% complete, ETA 00:01:28
# Fork: 1 of 1
# Warmup Iteration   1: 1692195667,052 ops/s
Iteration   1: 1774234510,198 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocation":
  1774234510,198 ops/s

Secondary result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocation:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_05_DummyInvokeState_testInvocation_jmhTest.testInvocation_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS

# Run progress: 51,06% complete, ETA 00:01:25
# Fork: 1 of 1
# Warmup Iteration   1: 274329497,351 ops/s
Iteration   1: 285901122,364 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS":
  285901122,364 ops/s

Secondary result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_05_DummyInvokeState_testInvocationReturnValueBS_jmhTest.testInvocationReturnValueBS_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS

# Run progress: 53,19% complete, ETA 00:01:21
# Fork: 1 of 1
# Warmup Iteration   1: 283193089,427 ops/s
Iteration   1: 308831433,055 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS":
  308831433,055 ops/s

Secondary result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         TIMED_WAITING
 49,5%         RUNNABLE
  0,5%         WAITING

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait

....[Thread state: RUNNABLE]........................................................................
 49,0%  99,0% org.sample.jmh_generated.JMHBenchmark_05_DummyInvokeState_testInvocationReturnValueTS_jmhTest.testInvocationReturnValueTS_thrpt_jmhStub
  0,5%   1,0% java.lang.Thread.isInterrupted

....[Thread state: WAITING].........................................................................
  0,5% 100,0% jdk.internal.misc.Unsafe.park



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke

# Run progress: 55,32% complete, ETA 00:01:18
# Fork: 1 of 1
# Warmup Iteration   1: 5434910,607 ops/s
Iteration   1: 5439569,863 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke":
  5439569,863 ops/s

Secondary result "org.sample.JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 46,5%  92,9% org.sample.JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke
  3,5%   7,1% org.sample.jmh_generated.JMHBenchmark_06_SumCalcInvoke_SumCalcInvoke_jmhTest.SumCalcInvoke_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_06_SumCalcInvoke.baseline

# Run progress: 57,45% complete, ETA 00:01:14
# Fork: 1 of 1
# Warmup Iteration   1: 1891969529,167 ops/s
Iteration   1: 1849261140,850 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_06_SumCalcInvoke.baseline":
  1849261140,850 ops/s

Secondary result "org.sample.JMHBenchmark_06_SumCalcInvoke.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_06_SumCalcInvoke_baseline_jmhTest.baseline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc

# Run progress: 59,57% complete, ETA 00:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 5387307,684 ops/s
Iteration   1: 5405482,119 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc":
  5405482,119 ops/s

Secondary result "org.sample.JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 46,5%  92,9% org.sample.JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc
  3,5%   7,1% org.sample.jmh_generated.JMHBenchmark_06_SumCalcInvoke_noInvocationSumCalc_jmhTest.noInvocationSumCalc_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithDontInline

# Run progress: 61,70% complete, ETA 00:01:06
# Fork: 1 of 1
# Warmup Iteration   1: 2388370,798 ops/s
Iteration   1: 2418529,471 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithDontInline":
  2418529,471 ops/s

Secondary result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithDontInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 46,9%  93,9% org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithDontInline
  2,6%   5,1% org.sample.jmh_generated.JMHBenchmark_07_SumCalcWithCompileHint_SumCalcWithDontInline_jmhTest.SumCalcWithDontInline_thrpt_jmhStub
  0,5%   1,0% java.util.concurrent.atomic.AtomicInteger.get

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithInline

# Run progress: 63,83% complete, ETA 00:01:03
# Fork: 1 of 1
# Warmup Iteration   1: 5403200,665 ops/s
Iteration   1: 5250396,862 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithInline":
  5250396,862 ops/s

Secondary result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 46,4%  92,8% org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithInline
  3,6%   7,2% org.sample.jmh_generated.JMHBenchmark_07_SumCalcWithCompileHint_SumCalcWithInline_jmhTest.SumCalcWithInline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_07_SumCalcWithCompileHint.baseline

# Run progress: 65,96% complete, ETA 00:00:59
# Fork: 1 of 1
# Warmup Iteration   1: 1875670982,207 ops/s
Iteration   1: 1872774800,882 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.baseline":
  1872774800,882 ops/s

Secondary result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         TIMED_WAITING
 49,5%         RUNNABLE
  0,5%         WAITING

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait

....[Thread state: RUNNABLE]........................................................................
 49,5% 100,0% org.sample.jmh_generated.JMHBenchmark_07_SumCalcWithCompileHint_baseline_jmhTest.baseline_thrpt_jmhStub

....[Thread state: WAITING].........................................................................
  0,5% 100,0% jdk.internal.misc.Unsafe.park



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_07_SumCalcWithCompileHint.noInvocationSumCalc

# Run progress: 68,09% complete, ETA 00:00:55
# Fork: 1 of 1
# Warmup Iteration   1: 5528231,119 ops/s
Iteration   1: 5339110,011 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.noInvocationSumCalc":
  5339110,011 ops/s

Secondary result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.noInvocationSumCalc:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 46,0%  92,0% org.sample.JMHBenchmark_07_SumCalcWithCompileHint.noInvocationSumCalc
  4,0%   8,0% org.sample.jmh_generated.JMHBenchmark_07_SumCalcWithCompileHint_noInvocationSumCalc_jmhTest.noInvocationSumCalc_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.baseline

# Run progress: 70,21% complete, ETA 00:00:52
# Fork: 1 of 1
# Warmup Iteration   1: 1887190404,184 ops/s
Iteration   1: 1856429636,330 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.baseline":
  1856429636,330 ops/s

Secondary result "org.sample.JMHBenchmark_08_NumberOfSumCalc.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_08_NumberOfSumCalc_baseline_jmhTest.baseline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke

# Run progress: 72,34% complete, ETA 00:00:48
# Fork: 1 of 1
# Warmup Iteration   1: 560141,278 ops/s
Iteration   1: 595613,563 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke":
  595613,563 ops/s

Secondary result "org.sample.JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc

# Run progress: 74,47% complete, ETA 00:00:44
# Fork: 1 of 1
# Warmup Iteration   1: 610774,857 ops/s
Iteration   1: 596152,783 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc":
  596152,783 ops/s

Secondary result "org.sample.JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke

# Run progress: 76,60% complete, ETA 00:00:40
# Fork: 1 of 1
# Warmup Iteration   1: 603536,462 ops/s
Iteration   1: 599410,065 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke":
  599410,065 ops/s

Secondary result "org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested

# Run progress: 78,72% complete, ETA 00:00:37
# Fork: 1 of 1
# Warmup Iteration   1: 571314,669 ops/s
Iteration   1: 596993,682 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested":
  596993,682 ops/s

Secondary result "org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         TIMED_WAITING
 49,5%         RUNNABLE
  0,5%         WAITING

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait

....[Thread state: RUNNABLE]........................................................................
 49,0%  99,0% org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested
  0,5%   1,0% org.sample.jmh_generated.JMHBenchmark_08_NumberOfSumCalc_numberSumCalcInvokeNested_jmhTest.numberSumCalcInvokeNested_thrpt_jmhStub

....[Thread state: WAITING].........................................................................
  0,5% 100,0% jdk.internal.misc.Unsafe.park



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithDontInline

# Run progress: 80,85% complete, ETA 00:00:33
# Fork: 1 of 1
# Warmup Iteration   1: 639474,618 ops/s
Iteration   1: 631059,894 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithDontInline":
  631059,894 ops/s

Secondary result "org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithDontInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 49,0%  97,9% org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithDontInline
  1,0%   2,1% org.sample.jmh_generated.JMHBenchmark_09_NumberOfSumCalcWithCompileHint_SumCalcWithDontInline_jmhTest.SumCalcWithDontInline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithInline

# Run progress: 82,98% complete, ETA 00:00:29
# Fork: 1 of 1
# Warmup Iteration   1: 1974433,690 ops/s
Iteration   1: 1999595,232 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithInline":
  1999595,232 ops/s

Secondary result "org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 48,5%  96,9% org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithInline
  1,5%   3,1% org.sample.jmh_generated.JMHBenchmark_09_NumberOfSumCalcWithCompileHint_SumCalcWithInline_jmhTest.SumCalcWithInline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.baseline

# Run progress: 85,11% complete, ETA 00:00:26
# Fork: 1 of 1
# Warmup Iteration   1: 1901866121,266 ops/s
Iteration   1: 1885702160,841 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.baseline":
  1885702160,841 ops/s

Secondary result "org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_09_NumberOfSumCalcWithCompileHint_baseline_jmhTest.baseline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_10_longSumCalc.baseline

# Run progress: 87,23% complete, ETA 00:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 1899339266,144 ops/s
Iteration   1: 1835703285,876 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_10_longSumCalc.baseline":
  1835703285,876 ops/s

Secondary result "org.sample.JMHBenchmark_10_longSumCalc.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_10_longSumCalc_baseline_jmhTest.baseline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_10_longSumCalc.longSumCalc

# Run progress: 89,36% complete, ETA 00:00:18
# Fork: 1 of 1
# Warmup Iteration   1: 101175,738 ops/s
Iteration   1: 103768,557 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_10_longSumCalc.longSumCalc":
  103768,557 ops/s

Secondary result "org.sample.JMHBenchmark_10_longSumCalc.longSumCalc:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.JMHBenchmark_10_longSumCalc._longSumCalcMethod

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc

# Run progress: 91,49% complete, ETA 00:00:14
# Fork: 1 of 1
# Warmup Iteration   1: 80661,953 ops/s
Iteration   1: 82720,430 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc":
  82720,430 ops/s

Secondary result "org.sample.JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         TIMED_WAITING
 49,5%         RUNNABLE
  0,5%         WAITING

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait

....[Thread state: RUNNABLE]........................................................................
 49,0%  99,0% org.sample.JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc
  0,5%   1,0% org.sample.jmh_generated.JMHBenchmark_10_longSumCalc_noInvocationlongSumCalc_jmhTest.noInvocationlongSumCalc_thrpt_jmhStub

....[Thread state: WAITING].........................................................................
  0,5% 100,0% jdk.internal.misc.Unsafe.park



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.baseline

# Run progress: 93,62% complete, ETA 00:00:11
# Fork: 1 of 1
# Warmup Iteration   1: 1874852492,177 ops/s
Iteration   1: 1845028470,762 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.baseline":
  1845028470,762 ops/s

Secondary result "org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.baseline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.jmh_generated.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint_baseline_jmhTest.baseline_thrpt_jmhStub

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithDontInline

# Run progress: 95,74% complete, ETA 00:00:07
# Fork: 1 of 1
# Warmup Iteration   1: 20850,775 ops/s
Iteration   1: 21992,172 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithDontInline":
  21992,172 ops/s

Secondary result "org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithDontInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 47,2%  94,4% org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint._longNotInlineMethod
  2,8%   5,6% org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithDontInline

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: C:\Program Files\BellSoft\LibericaJDK-11\bin\java.exe
# VM options: -XX:+Inline
# Warmup: 1 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithInline

# Run progress: 97,87% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 25582,764 ops/s
Iteration   1: 26816,693 ops/s
                 新tack: <delayed till summary>



Result "org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithInline":
  26816,693 ops/s

Secondary result "org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithInline:新tack":
Stack profiler:

....[Thread state distributions]....................................................................
 50,0%         RUNNABLE
 50,0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 50,0% 100,0% org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint._longInlineMethod

....[Thread state: TIMED_WAITING]...................................................................
 50,0% 100,0% java.lang.Object.wait



# Run complete. Total time: 00:02:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                      Mode  Cnt           Score   Error  Units
JMHBenchmark_01_DummyInvoke.baseline                                                                          thrpt       1890673815,337          ops/s
JMHBenchmark_01_DummyInvoke.baseline:新tack                                                                   thrpt                  NaN            ---
JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod                                                         thrpt       1848766471,296          ops/s
JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod:新tack                                                  thrpt                  NaN            ---
JMHBenchmark_02_InvokeWithReturn.baseline                                                                     thrpt       1902996369,721          ops/s
JMHBenchmark_02_InvokeWithReturn.baseline:新tack                                                              thrpt                  NaN            ---
JMHBenchmark_02_InvokeWithReturn.noInvocation                                                                 thrpt        258056156,005          ops/s
JMHBenchmark_02_InvokeWithReturn.noInvocation:新tack                                                          thrpt                  NaN            ---
JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh                                              thrpt        261089263,101          ops/s
JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh:新tack                                       thrpt                  NaN            ---
JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue                                     thrpt        257044328,927          ops/s
JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue:新tack                              thrpt                  NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.baseline                                                           thrpt       1891169203,220          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.baseline:新tack                                                    thrpt                  NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.noInvocationWithReturnValue                                        thrpt        259029010,052          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.noInvocationWithReturnValue:新tack                                 thrpt                  NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInline                        thrpt        377079333,032          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInline:新tack                 thrpt                  NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInlineBh                      thrpt        181520892,155          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInlineBh:新tack               thrpt                  NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInline                            thrpt       1875902272,968          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInline:新tack                     thrpt                  NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInlineBh                          thrpt        258866433,423          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInlineBh:新tack                   thrpt                  NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintDontInline         thrpt        183978926,417          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintDontInline:新tack  thrpt                  NaN            ---
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintInline             thrpt        261275263,917          ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintInline:新tack      thrpt                  NaN            ---
JMHBenchmark_04_DummyInvokeWithValue.baseline                                                                 thrpt       1833990722,115          ops/s
JMHBenchmark_04_DummyInvokeWithValue.baseline:新tack                                                          thrpt                  NaN            ---
JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue                                                  thrpt        278073479,260          ops/s
JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue:新tack                                           thrpt                  NaN            ---
JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue                                          thrpt        237750472,557          ops/s
JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue:新tack                                   thrpt                  NaN            ---
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod                                                thrpt       1836772108,117          ops/s
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod:新tack                                         thrpt                  NaN            ---
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue                                 thrpt        295150010,268          ops/s
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue:新tack                          thrpt                  NaN            ---
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue                         thrpt        287493671,344          ops/s
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue:新tack                  thrpt                  NaN            ---
JMHBenchmark_05_DummyInvokeState.baseline                                                                     thrpt       1832059686,012          ops/s
JMHBenchmark_05_DummyInvokeState.baseline:新tack                                                              thrpt                  NaN            ---
JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS                                                    thrpt        284457971,871          ops/s
JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS:新tack                                             thrpt                  NaN            ---
JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS                                                thrpt        251596070,515          ops/s
JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS:新tack                                         thrpt                  NaN            ---
JMHBenchmark_05_DummyInvokeState.testInvocation                                                               thrpt       1774234510,198          ops/s
JMHBenchmark_05_DummyInvokeState.testInvocation:新tack                                                        thrpt                  NaN            ---
JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS                                                  thrpt        285901122,364          ops/s
JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS:新tack                                           thrpt                  NaN            ---
JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS                                                  thrpt        308831433,055          ops/s
JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS:新tack                                           thrpt                  NaN            ---
JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke                                                                   thrpt          5439569,863          ops/s
JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke:新tack                                                            thrpt                  NaN            ---
JMHBenchmark_06_SumCalcInvoke.baseline                                                                        thrpt       1849261140,850          ops/s
JMHBenchmark_06_SumCalcInvoke.baseline:新tack                                                                 thrpt                  NaN            ---
JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc                                                             thrpt          5405482,119          ops/s
JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc:新tack                                                      thrpt                  NaN            ---
JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithDontInline                                                  thrpt          2418529,471          ops/s
JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithDontInline:新tack                                           thrpt                  NaN            ---
JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithInline                                                      thrpt          5250396,862          ops/s
JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithInline:新tack                                               thrpt                  NaN            ---
JMHBenchmark_07_SumCalcWithCompileHint.baseline                                                               thrpt       1872774800,882          ops/s
JMHBenchmark_07_SumCalcWithCompileHint.baseline:新tack                                                        thrpt                  NaN            ---
JMHBenchmark_07_SumCalcWithCompileHint.noInvocationSumCalc                                                    thrpt          5339110,011          ops/s
JMHBenchmark_07_SumCalcWithCompileHint.noInvocationSumCalc:新tack                                             thrpt                  NaN            ---
JMHBenchmark_08_NumberOfSumCalc.baseline                                                                      thrpt       1856429636,330          ops/s
JMHBenchmark_08_NumberOfSumCalc.baseline:新tack                                                               thrpt                  NaN            ---
JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke                                                             thrpt           595613,563          ops/s
JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke:新tack                                                      thrpt                  NaN            ---
JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc                                                     thrpt           596152,783          ops/s
JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc:新tack                                              thrpt                  NaN            ---
JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke                                                           thrpt           599410,065          ops/s
JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke:新tack                                                    thrpt                  NaN            ---
JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested                                                     thrpt           596993,682          ops/s
JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested:新tack                                              thrpt                  NaN            ---
JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithDontInline                                          thrpt           631059,894          ops/s
JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithDontInline:新tack                                   thrpt                  NaN            ---
JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithInline                                              thrpt          1999595,232          ops/s
JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithInline:新tack                                       thrpt                  NaN            ---
JMHBenchmark_09_NumberOfSumCalcWithCompileHint.baseline                                                       thrpt       1885702160,841          ops/s
JMHBenchmark_09_NumberOfSumCalcWithCompileHint.baseline:新tack                                                thrpt                  NaN            ---
JMHBenchmark_10_longSumCalc.baseline                                                                          thrpt       1835703285,876          ops/s
JMHBenchmark_10_longSumCalc.baseline:新tack                                                                   thrpt                  NaN            ---
JMHBenchmark_10_longSumCalc.longSumCalc                                                                       thrpt           103768,557          ops/s
JMHBenchmark_10_longSumCalc.longSumCalc:新tack                                                                thrpt                  NaN            ---
JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc                                                           thrpt            82720,430          ops/s
JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc:新tack                                                    thrpt                  NaN            ---
JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.baseline                                           thrpt       1845028470,762          ops/s
JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.baseline:新tack                                    thrpt                  NaN            ---
JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithDontInline                              thrpt            21992,172          ops/s
JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithDontInline:新tack                       thrpt                  NaN            ---
JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithInline                                  thrpt            26816,693          ops/s
JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithInline:新tack                           thrpt                  NaN            ---

Benchmark result is saved to results/win-server+Inline-stack.txt
