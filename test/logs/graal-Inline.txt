# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_01_DummyInvoke.baseline

# Run progress: 0.00% complete, ETA 00:14:30
# Fork: 1 of 1
# Warmup Iteration   1: 33262404.209 ops/s
# Warmup Iteration   2: 93368218.110 ops/s
# Warmup Iteration   3: 368080421.460 ops/s
# Warmup Iteration   4: 371237312.902 ops/s
# Warmup Iteration   5: 374455718.257 ops/s
Iteration   1: 376717762.634 ops/s
Iteration   2: 379962796.452 ops/s
Iteration   3: 377739856.591 ops/s
Iteration   4: 374069344.381 ops/s
Iteration   5: 371122437.979 ops/s


Result "org.sample.JMHBenchmark_01_DummyInvoke.baseline":
  375922439.607 ±(99.9%) 13161938.643 ops/s [Average]
  (min, avg, max) = (371122437.979, 375922439.607, 379962796.452), stdev = 3418113.668
  CI (99.9%): [362760500.964, 389084378.250] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod

# Run progress: 3.45% complete, ETA 00:17:46
# Fork: 1 of 1
# Warmup Iteration   1: 69287451.866 ops/s
# Warmup Iteration   2: 180083652.583 ops/s
# Warmup Iteration   3: 184894021.509 ops/s
# Warmup Iteration   4: 188454122.755 ops/s
# Warmup Iteration   5: 182746412.965 ops/s
Iteration   1: 186615515.449 ops/s
Iteration   2: 186816893.120 ops/s
Iteration   3: 190135485.419 ops/s
Iteration   4: 189993618.484 ops/s
Iteration   5: 188032258.192 ops/s


Result "org.sample.JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod":
  188318754.133 ±(99.9%) 6484755.219 ops/s [Average]
  (min, avg, max) = (186615515.449, 188318754.133, 190135485.419), stdev = 1684070.337
  CI (99.9%): [181833998.913, 194803509.352] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.baseline

# Run progress: 6.90% complete, ETA 00:17:06
# Fork: 1 of 1
# Warmup Iteration   1: 128985075.083 ops/s
# Warmup Iteration   2: 350222600.476 ops/s
# Warmup Iteration   3: 375250153.138 ops/s
# Warmup Iteration   4: 369783543.292 ops/s
# Warmup Iteration   5: 368736285.720 ops/s
Iteration   1: 373983500.882 ops/s
Iteration   2: 373192516.889 ops/s
Iteration   3: 371582174.523 ops/s
Iteration   4: 377345398.037 ops/s
Iteration   5: 380708552.452 ops/s


Result "org.sample.JMHBenchmark_02_InvokeWithReturn.baseline":
  375362428.557 ±(99.9%) 14071125.369 ops/s [Average]
  (min, avg, max) = (371582174.523, 375362428.557, 380708552.452), stdev = 3654226.573
  CI (99.9%): [361291303.188, 389433553.925] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.noInvocation

# Run progress: 10.34% complete, ETA 00:16:25
# Fork: 1 of 1
# Warmup Iteration   1: 41847044.755 ops/s
# Warmup Iteration   2: 105697901.412 ops/s
# Warmup Iteration   3: 112436933.714 ops/s
# Warmup Iteration   4: 114105527.958 ops/s
# Warmup Iteration   5: 112642151.515 ops/s
Iteration   1: 113045792.241 ops/s
Iteration   2: 114380570.352 ops/s
Iteration   3: 113383403.075 ops/s
Iteration   4: 112237438.630 ops/s
Iteration   5: 113525623.369 ops/s


Result "org.sample.JMHBenchmark_02_InvokeWithReturn.noInvocation":
  113314565.533 ±(99.9%) 2993916.972 ops/s [Average]
  (min, avg, max) = (112237438.630, 113314565.533, 114380570.352), stdev = 777510.730
  CI (99.9%): [110320648.562, 116308482.505] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh

# Run progress: 13.79% complete, ETA 00:15:44
# Fork: 1 of 1
# Warmup Iteration   1: 34062825.770 ops/s
# Warmup Iteration   2: 89098979.632 ops/s
# Warmup Iteration   3: 92352349.256 ops/s
# Warmup Iteration   4: 91574999.191 ops/s
# Warmup Iteration   5: 89673007.364 ops/s
Iteration   1: 90759677.685 ops/s
Iteration   2: 90945192.588 ops/s
Iteration   3: 90764021.735 ops/s
Iteration   4: 92012047.549 ops/s
Iteration   5: 91569318.256 ops/s


Result "org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh":
  91210051.563 ±(99.9%) 2147575.297 ops/s [Average]
  (min, avg, max) = (90759677.685, 91210051.563, 92012047.549), stdev = 557718.485
  CI (99.9%): [89062476.266, 93357626.860] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue

# Run progress: 17.24% complete, ETA 00:15:05
# Fork: 1 of 1
# Warmup Iteration   1: 34089835.880 ops/s
# Warmup Iteration   2: 90385465.009 ops/s
# Warmup Iteration   3: 94829152.246 ops/s
# Warmup Iteration   4: 94733492.262 ops/s
# Warmup Iteration   5: 93176958.453 ops/s
Iteration   1: 94195418.210 ops/s
Iteration   2: 93247595.613 ops/s
Iteration   3: 93962034.392 ops/s
Iteration   4: 93951004.742 ops/s
Iteration   5: 94418586.122 ops/s


Result "org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue":
  93954927.816 ±(99.9%) 1692969.436 ops/s [Average]
  (min, avg, max) = (93247595.613, 93954927.816, 94418586.122), stdev = 439658.786
  CI (99.9%): [92261958.380, 95647897.252] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.baseline

# Run progress: 20.69% complete, ETA 00:14:27
# Fork: 1 of 1
# Warmup Iteration   1: 119349134.677 ops/s
# Warmup Iteration   2: 369259980.902 ops/s
# Warmup Iteration   3: 371683839.267 ops/s
# Warmup Iteration   4: 369252594.058 ops/s
# Warmup Iteration   5: 374407103.396 ops/s
Iteration   1: 377285561.974 ops/s
Iteration   2: 374036059.637 ops/s
Iteration   3: 378084068.859 ops/s
Iteration   4: 380249638.609 ops/s
Iteration   5: 379611289.286 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.baseline":
  377853323.673 ±(99.9%) 9388757.055 ops/s [Average]
  (min, avg, max) = (374036059.637, 377853323.673, 380249638.609), stdev = 2438230.392
  CI (99.9%): [368464566.618, 387242080.728] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue

# Run progress: 24.14% complete, ETA 00:13:48
# Fork: 1 of 1
# Warmup Iteration   1: 40153502.906 ops/s
# Warmup Iteration   2: 108700571.846 ops/s
# Warmup Iteration   3: 113789399.723 ops/s
# Warmup Iteration   4: 112302387.294 ops/s
# Warmup Iteration   5: 112106763.741 ops/s
Iteration   1: 113138633.071 ops/s
Iteration   2: 109482667.753 ops/s
Iteration   3: 114199269.188 ops/s
Iteration   4: 112114128.635 ops/s
Iteration   5: 112779809.554 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue":
  112342901.640 ±(99.9%) 6807981.069 ops/s [Average]
  (min, avg, max) = (109482667.753, 112342901.640, 114199269.188), stdev = 1768011.064
  CI (99.9%): [105534920.572, 119150882.709] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue

# Run progress: 27.59% complete, ETA 00:13:10
# Fork: 1 of 1
# Warmup Iteration   1: 41906353.335 ops/s
# Warmup Iteration   2: 107494952.134 ops/s
# Warmup Iteration   3: 111582639.650 ops/s
# Warmup Iteration   4: 109855344.419 ops/s
# Warmup Iteration   5: 114083459.049 ops/s
Iteration   1: 113180695.878 ops/s
Iteration   2: 114519052.590 ops/s
Iteration   3: 114524133.892 ops/s
Iteration   4: 111584146.695 ops/s
Iteration   5: 112538105.187 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue":
  113269226.848 ±(99.9%) 4915693.419 ops/s [Average]
  (min, avg, max) = (111584146.695, 113269226.848, 114524133.892), stdev = 1276589.970
  CI (99.9%): [108353533.430, 118184920.267] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod

# Run progress: 31.03% complete, ETA 00:12:32
# Fork: 1 of 1
# Warmup Iteration   1: 65776132.063 ops/s
# Warmup Iteration   2: 177431950.634 ops/s
# Warmup Iteration   3: 188001772.506 ops/s
# Warmup Iteration   4: 181141962.974 ops/s
# Warmup Iteration   5: 186257634.278 ops/s
Iteration   1: 189692636.464 ops/s
Iteration   2: 185757277.531 ops/s
Iteration   3: 190252903.165 ops/s
Iteration   4: 189473955.318 ops/s
Iteration   5: 187662197.556 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod":
  188567794.007 ±(99.9%) 7111999.533 ops/s [Average]
  (min, avg, max) = (185757277.531, 188567794.007, 190252903.165), stdev = 1846963.694
  CI (99.9%): [181455794.474, 195679793.540] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue

# Run progress: 34.48% complete, ETA 00:11:54
# Fork: 1 of 1
# Warmup Iteration   1: 34695030.466 ops/s
# Warmup Iteration   2: 88752305.522 ops/s
# Warmup Iteration   3: 94559585.320 ops/s
# Warmup Iteration   4: 94811624.052 ops/s
# Warmup Iteration   5: 93342388.582 ops/s
Iteration   1: 94365691.593 ops/s
Iteration   2: 93742971.576 ops/s
Iteration   3: 95006778.027 ops/s
Iteration   4: 94767184.894 ops/s
Iteration   5: 95211255.305 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue":
  94618776.279 ±(99.9%) 2240902.411 ops/s [Average]
  (min, avg, max) = (93742971.576, 94618776.279, 95211255.305), stdev = 581955.240
  CI (99.9%): [92377873.868, 96859678.690] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue

# Run progress: 37.93% complete, ETA 00:11:16
# Fork: 1 of 1
# Warmup Iteration   1: 32737599.465 ops/s
# Warmup Iteration   2: 90666892.133 ops/s
# Warmup Iteration   3: 93011223.492 ops/s
# Warmup Iteration   4: 92691174.786 ops/s
# Warmup Iteration   5: 93152310.162 ops/s
Iteration   1: 91880097.968 ops/s
Iteration   2: 93939092.685 ops/s
Iteration   3: 94354174.384 ops/s
Iteration   4: 93276439.273 ops/s
Iteration   5: 93537118.500 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue":
  93397384.562 ±(99.9%) 3625134.525 ops/s [Average]
  (min, avg, max) = (91880097.968, 93397384.562, 94354174.384), stdev = 941435.924
  CI (99.9%): [89772250.036, 97022519.087] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.baseline

# Run progress: 41.38% complete, ETA 00:10:39
# Fork: 1 of 1
# Warmup Iteration   1: 123879414.304 ops/s
# Warmup Iteration   2: 355014120.521 ops/s
# Warmup Iteration   3: 378475438.613 ops/s
# Warmup Iteration   4: 366169974.612 ops/s
# Warmup Iteration   5: 376683532.242 ops/s
Iteration   1: 375894362.092 ops/s
Iteration   2: 374095545.921 ops/s
Iteration   3: 375812460.544 ops/s
Iteration   4: 374129145.612 ops/s
Iteration   5: 373521024.945 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.baseline":
  374690507.823 ±(99.9%) 4193862.331 ops/s [Average]
  (min, avg, max) = (373521024.945, 374690507.823, 375894362.092), stdev = 1089132.729
  CI (99.9%): [370496645.492, 378884370.153] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS

# Run progress: 44.83% complete, ETA 00:10:01
# Fork: 1 of 1
# Warmup Iteration   1: 40326529.013 ops/s
# Warmup Iteration   2: 107127877.291 ops/s
# Warmup Iteration   3: 112663206.052 ops/s
# Warmup Iteration   4: 112838816.133 ops/s
# Warmup Iteration   5: 111588728.939 ops/s
Iteration   1: 113237985.931 ops/s
Iteration   2: 112803114.405 ops/s
Iteration   3: 111929048.521 ops/s
Iteration   4: 111922690.704 ops/s
Iteration   5: 113148639.144 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS":
  112608295.741 ±(99.9%) 2479008.923 ops/s [Average]
  (min, avg, max) = (111922690.704, 112608295.741, 113237985.931), stdev = 643790.745
  CI (99.9%): [110129286.818, 115087304.664] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS

# Run progress: 48.28% complete, ETA 00:09:24
# Fork: 1 of 1
# Warmup Iteration   1: 39732293.344 ops/s
# Warmup Iteration   2: 110067992.834 ops/s
# Warmup Iteration   3: 110102189.372 ops/s
# Warmup Iteration   4: 114341576.596 ops/s
# Warmup Iteration   5: 109776081.017 ops/s
Iteration   1: 113329403.826 ops/s
Iteration   2: 113126107.908 ops/s
Iteration   3: 112691981.140 ops/s
Iteration   4: 113265014.563 ops/s
Iteration   5: 113218731.636 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS":
  113126247.814 ±(99.9%) 977315.498 ops/s [Average]
  (min, avg, max) = (112691981.140, 113126247.814, 113329403.826), stdev = 253805.731
  CI (99.9%): [112148932.316, 114103563.313] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.testInvocation

# Run progress: 51.72% complete, ETA 00:08:46
# Fork: 1 of 1
# Warmup Iteration   1: 66821047.720 ops/s
# Warmup Iteration   2: 179329895.277 ops/s
# Warmup Iteration   3: 186535009.360 ops/s
# Warmup Iteration   4: 186429707.361 ops/s
# Warmup Iteration   5: 185753097.808 ops/s
Iteration   1: 185319466.900 ops/s
Iteration   2: 189152265.838 ops/s
Iteration   3: 187439148.973 ops/s
Iteration   4: 186180673.819 ops/s
Iteration   5: 187202806.185 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocation":
  187058872.343 ±(99.9%) 5561610.856 ops/s [Average]
  (min, avg, max) = (185319466.900, 187058872.343, 189152265.838), stdev = 1444332.678
  CI (99.9%): [181497261.487, 192620483.199] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS

# Run progress: 55.17% complete, ETA 00:08:08
# Fork: 1 of 1
# Warmup Iteration   1: 33913238.293 ops/s
# Warmup Iteration   2: 90888171.483 ops/s
# Warmup Iteration   3: 93951794.406 ops/s
# Warmup Iteration   4: 94906431.767 ops/s
# Warmup Iteration   5: 94800342.112 ops/s
Iteration   1: 94067456.818 ops/s
Iteration   2: 93783426.586 ops/s
Iteration   3: 94233982.110 ops/s
Iteration   4: 94737315.983 ops/s
Iteration   5: 94381174.403 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS":
  94240671.180 ±(99.9%) 1368899.575 ops/s [Average]
  (min, avg, max) = (93783426.586, 94240671.180, 94737315.983), stdev = 355498.873
  CI (99.9%): [92871771.605, 95609570.755] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS

# Run progress: 58.62% complete, ETA 00:07:31
# Fork: 1 of 1
# Warmup Iteration   1: 34439638.362 ops/s
# Warmup Iteration   2: 87564452.163 ops/s
# Warmup Iteration   3: 94744809.915 ops/s
# Warmup Iteration   4: 94308150.659 ops/s
# Warmup Iteration   5: 92931377.288 ops/s
Iteration   1: 92609272.506 ops/s
Iteration   2: 95085910.898 ops/s
Iteration   3: 93982083.999 ops/s
Iteration   4: 93972217.186 ops/s
Iteration   5: 93232743.593 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS":
  93776445.636 ±(99.9%) 3577794.229 ops/s [Average]
  (min, avg, max) = (92609272.506, 93776445.636, 95085910.898), stdev = 929141.799
  CI (99.9%): [90198651.408, 97354239.865] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke

# Run progress: 62.07% complete, ETA 00:06:53
# Fork: 1 of 1
# Warmup Iteration   1: 785632.136 ops/s
# Warmup Iteration   2: 2062250.182 ops/s
# Warmup Iteration   3: 2122069.766 ops/s
# Warmup Iteration   4: 2151042.907 ops/s
# Warmup Iteration   5: 2133754.029 ops/s
Iteration   1: 2150498.071 ops/s
Iteration   2: 2172183.236 ops/s
Iteration   3: 2156473.271 ops/s
Iteration   4: 2188499.303 ops/s
Iteration   5: 2178826.242 ops/s


Result "org.sample.JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke":
  2169296.025 ±(99.9%) 60447.537 ops/s [Average]
  (min, avg, max) = (2150498.071, 2169296.025, 2188499.303), stdev = 15698.033
  CI (99.9%): [2108848.488, 2229743.562] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_06_SumCalcInvoke.baseline

# Run progress: 65.52% complete, ETA 00:06:15
# Fork: 1 of 1
# Warmup Iteration   1: 136934806.292 ops/s
# Warmup Iteration   2: 347964886.608 ops/s
# Warmup Iteration   3: 369795636.984 ops/s
# Warmup Iteration   4: 361781785.083 ops/s
# Warmup Iteration   5: 376776546.804 ops/s
Iteration   1: 376223205.296 ops/s
Iteration   2: 379910772.030 ops/s
Iteration   3: 374912264.590 ops/s
Iteration   4: 379976510.258 ops/s
Iteration   5: 378376980.689 ops/s


Result "org.sample.JMHBenchmark_06_SumCalcInvoke.baseline":
  377879946.573 ±(99.9%) 8678654.855 ops/s [Average]
  (min, avg, max) = (374912264.590, 377879946.573, 379976510.258), stdev = 2253819.106
  CI (99.9%): [369201291.718, 386558601.428] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc

# Run progress: 68.97% complete, ETA 00:05:38
# Fork: 1 of 1
# Warmup Iteration   1: 760548.789 ops/s
# Warmup Iteration   2: 2009866.363 ops/s
# Warmup Iteration   3: 2105439.678 ops/s
# Warmup Iteration   4: 2163334.152 ops/s
# Warmup Iteration   5: 2183499.416 ops/s
Iteration   1: 2206365.960 ops/s
Iteration   2: 2211667.429 ops/s
Iteration   3: 2195845.003 ops/s
Iteration   4: 2189073.954 ops/s
Iteration   5: 2211873.175 ops/s


Result "org.sample.JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc":
  2202965.104 ±(99.9%) 38999.528 ops/s [Average]
  (min, avg, max) = (2189073.954, 2202965.104, 2211873.175), stdev = 10128.054
  CI (99.9%): [2163965.576, 2241964.632] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.baseline

# Run progress: 72.41% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 136377451.439 ops/s
# Warmup Iteration   2: 359727672.088 ops/s
# Warmup Iteration   3: 378456257.302 ops/s
# Warmup Iteration   4: 378061722.647 ops/s
# Warmup Iteration   5: 373181371.254 ops/s
Iteration   1: 379506468.917 ops/s
Iteration   2: 373795705.831 ops/s
Iteration   3: 375465374.182 ops/s
Iteration   4: 379628088.693 ops/s
Iteration   5: 376957347.943 ops/s


Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.baseline":
  377070597.113 ±(99.9%) 9777283.422 ops/s [Average]
  (min, avg, max) = (373795705.831, 377070597.113, 379628088.693), stdev = 2539129.456
  CI (99.9%): [367293313.691, 386847880.535] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke

# Run progress: 75.86% complete, ETA 00:04:22
# Fork: 1 of 1
# Warmup Iteration   1: 270518.605 ops/s
# Warmup Iteration   2: 711847.463 ops/s
# Warmup Iteration   3: 753422.037 ops/s
# Warmup Iteration   4: 761123.182 ops/s
# Warmup Iteration   5: 754087.776 ops/s
Iteration   1: 759710.783 ops/s
Iteration   2: 758202.936 ops/s
Iteration   3: 755572.099 ops/s
Iteration   4: 756717.947 ops/s
Iteration   5: 755641.574 ops/s


Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke":
  757169.068 ±(99.9%) 6838.621 ops/s [Average]
  (min, avg, max) = (755572.099, 757169.068, 759710.783), stdev = 1775.968
  CI (99.9%): [750330.446, 764007.689] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc

# Run progress: 79.31% complete, ETA 00:03:45
# Fork: 1 of 1
# Warmup Iteration   1: 282745.774 ops/s
# Warmup Iteration   2: 738611.756 ops/s
# Warmup Iteration   3: 741320.691 ops/s
# Warmup Iteration   4: 736137.836 ops/s
# Warmup Iteration   5: 759640.950 ops/s
Iteration   1: 760489.806 ops/s
Iteration   2: 769554.820 ops/s
Iteration   3: 772919.145 ops/s
Iteration   4: 759050.658 ops/s
Iteration   5: 765720.236 ops/s


Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc":
  765546.933 ±(99.9%) 22635.337 ops/s [Average]
  (min, avg, max) = (759050.658, 765546.933, 772919.145), stdev = 5878.325
  CI (99.9%): [742911.596, 788182.270] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke

# Run progress: 82.76% complete, ETA 00:03:07
# Fork: 1 of 1
# Warmup Iteration   1: 232701.238 ops/s
# Warmup Iteration   2: 683190.218 ops/s
# Warmup Iteration   3: 664355.982 ops/s
# Warmup Iteration   4: 707507.108 ops/s
# Warmup Iteration   5: 701913.118 ops/s
Iteration   1: 709558.629 ops/s
Iteration   2: 717870.598 ops/s
Iteration   3: 707555.419 ops/s
Iteration   4: 711493.199 ops/s
Iteration   5: 705534.460 ops/s


Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke":
  710402.461 ±(99.9%) 18212.154 ops/s [Average]
  (min, avg, max) = (705534.460, 710402.461, 717870.598), stdev = 4729.638
  CI (99.9%): [692190.307, 728614.615] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested

# Run progress: 86.21% complete, ETA 00:02:30
# Fork: 1 of 1
# Warmup Iteration   1: 236522.787 ops/s
# Warmup Iteration   2: 609382.439 ops/s
# Warmup Iteration   3: 638775.883 ops/s
# Warmup Iteration   4: 647319.021 ops/s
# Warmup Iteration   5: 648238.697 ops/s
Iteration   1: 656713.854 ops/s
Iteration   2: 657525.996 ops/s
Iteration   3: 644178.117 ops/s
Iteration   4: 652305.101 ops/s
Iteration   5: 661491.697 ops/s


Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested":
  654442.953 ±(99.9%) 25417.473 ops/s [Average]
  (min, avg, max) = (644178.117, 654442.953, 661491.697), stdev = 6600.837
  CI (99.9%): [629025.480, 679860.426] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_10_longSumCalc.baseline

# Run progress: 89.66% complete, ETA 00:01:52
# Fork: 1 of 1
# Warmup Iteration   1: 136812724.885 ops/s
# Warmup Iteration   2: 359351185.236 ops/s
# Warmup Iteration   3: 373382576.041 ops/s
# Warmup Iteration   4: 373413359.366 ops/s
# Warmup Iteration   5: 371142853.461 ops/s
Iteration   1: 377050416.295 ops/s
Iteration   2: 373511121.958 ops/s
Iteration   3: 372423161.657 ops/s
Iteration   4: 374411935.361 ops/s
Iteration   5: 379464604.774 ops/s


Result "org.sample.JMHBenchmark_10_longSumCalc.baseline":
  375372248.009 ±(99.9%) 11000773.749 ops/s [Average]
  (min, avg, max) = (372423161.657, 375372248.009, 379464604.774), stdev = 2856866.008
  CI (99.9%): [364371474.260, 386373021.758] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_10_longSumCalc.longSumCalc

# Run progress: 93.10% complete, ETA 00:01:15
# Fork: 1 of 1
# Warmup Iteration   1: 46567.038 ops/s
# Warmup Iteration   2: 125735.112 ops/s
# Warmup Iteration   3: 128648.157 ops/s
# Warmup Iteration   4: 127909.549 ops/s
# Warmup Iteration   5: 130080.702 ops/s
Iteration   1: 129822.000 ops/s
Iteration   2: 129823.429 ops/s
Iteration   3: 129455.648 ops/s
Iteration   4: 130751.708 ops/s
Iteration   5: 130751.038 ops/s


Result "org.sample.JMHBenchmark_10_longSumCalc.longSumCalc":
  130120.765 ±(99.9%) 2290.553 ops/s [Average]
  (min, avg, max) = (129455.648, 130120.765, 130751.708), stdev = 594.849
  CI (99.9%): [127830.212, 132411.317] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:-Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc

# Run progress: 96.55% complete, ETA 00:00:37
# Fork: 1 of 1
# Warmup Iteration   1: 39011.422 ops/s
# Warmup Iteration   2: 105687.882 ops/s
# Warmup Iteration   3: 114061.230 ops/s
# Warmup Iteration   4: 111193.463 ops/s
# Warmup Iteration   5: 114076.020 ops/s
Iteration   1: 113954.014 ops/s
Iteration   2: 114810.496 ops/s
Iteration   3: 112451.232 ops/s
Iteration   4: 114966.484 ops/s
Iteration   5: 111859.302 ops/s


Result "org.sample.JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc":
  113608.305 ±(99.9%) 5379.633 ops/s [Average]
  (min, avg, max) = (111859.302, 113608.305, 114966.484), stdev = 1397.074
  CI (99.9%): [108228.673, 118987.938] (assumes normal distribution)


# Run complete. Total time: 00:18:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt          Score          Error  Units
JMHBenchmark_01_DummyInvoke.baseline                                                   thrpt    5  375922439.607 ± 13161938.643  ops/s
JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod                                  thrpt    5  188318754.133 ±  6484755.219  ops/s
JMHBenchmark_02_InvokeWithReturn.baseline                                              thrpt    5  375362428.557 ± 14071125.369  ops/s
JMHBenchmark_02_InvokeWithReturn.noInvocation                                          thrpt    5  113314565.533 ±  2993916.972  ops/s
JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh                       thrpt    5   91210051.563 ±  2147575.297  ops/s
JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue              thrpt    5   93954927.816 ±  1692969.436  ops/s
JMHBenchmark_04_DummyInvokeWithValue.baseline                                          thrpt    5  377853323.673 ±  9388757.055  ops/s
JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue                           thrpt    5  112342901.640 ±  6807981.069  ops/s
JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue                   thrpt    5  113269226.848 ±  4915693.419  ops/s
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod                         thrpt    5  188567794.007 ±  7111999.533  ops/s
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue          thrpt    5   94618776.279 ±  2240902.411  ops/s
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue  thrpt    5   93397384.562 ±  3625134.525  ops/s
JMHBenchmark_05_DummyInvokeState.baseline                                              thrpt    5  374690507.823 ±  4193862.331  ops/s
JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS                             thrpt    5  112608295.741 ±  2479008.923  ops/s
JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS                         thrpt    5  113126247.814 ±   977315.498  ops/s
JMHBenchmark_05_DummyInvokeState.testInvocation                                        thrpt    5  187058872.343 ±  5561610.856  ops/s
JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS                           thrpt    5   94240671.180 ±  1368899.575  ops/s
JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS                           thrpt    5   93776445.636 ±  3577794.229  ops/s
JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke                                            thrpt    5    2169296.025 ±    60447.537  ops/s
JMHBenchmark_06_SumCalcInvoke.baseline                                                 thrpt    5  377879946.573 ±  8678654.855  ops/s
JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc                                      thrpt    5    2202965.104 ±    38999.528  ops/s
JMHBenchmark_08_NumberOfSumCalc.baseline                                               thrpt    5  377070597.113 ±  9777283.422  ops/s
JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke                                      thrpt    5     757169.068 ±     6838.621  ops/s
JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc                              thrpt    5     765546.933 ±    22635.337  ops/s
JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke                                    thrpt    5     710402.461 ±    18212.154  ops/s
JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested                              thrpt    5     654442.953 ±    25417.473  ops/s
JMHBenchmark_10_longSumCalc.baseline                                                   thrpt    5  375372248.009 ± 11000773.749  ops/s
JMHBenchmark_10_longSumCalc.longSumCalc                                                thrpt    5     130120.765 ±     2290.553  ops/s
JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc                                    thrpt    5     113608.305 ±     5379.633  ops/s

Benchmark result is saved to results/graal-Inline.txt
