# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_01_DummyInvoke.baseline

# Run progress: 0.00% complete, ETA 00:23:30
# Fork: 1 of 1
# Warmup Iteration   1: 69442768.202 ops/s
# Warmup Iteration   2: 450259120.315 ops/s
# Warmup Iteration   3: 2022185643.999 ops/s
# Warmup Iteration   4: 2072390174.624 ops/s
# Warmup Iteration   5: 2030952284.910 ops/s
Iteration   1: 2067777671.720 ops/s
Iteration   2: 2061113693.538 ops/s
Iteration   3: 2040336124.401 ops/s
Iteration   4: 2026367324.833 ops/s
Iteration   5: 2065981977.357 ops/s


Result "org.sample.JMHBenchmark_01_DummyInvoke.baseline":
  2052315358.370 ±(99.9%) 69952349.667 ops/s [Average]
  (min, avg, max) = (2026367324.833, 2052315358.370, 2067777671.720), stdev = 18166403.065
  CI (99.9%): [1982363008.703, 2122267708.036] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod

# Run progress: 2.13% complete, ETA 00:29:09
# Fork: 1 of 1
# Warmup Iteration   1: 482180857.521 ops/s
# Warmup Iteration   2: 1971622859.658 ops/s
# Warmup Iteration   3: 1995858232.523 ops/s
# Warmup Iteration   4: 2053562723.055 ops/s
# Warmup Iteration   5: 2031748555.442 ops/s
Iteration   1: 2022813665.960 ops/s
Iteration   2: 2041511118.631 ops/s
Iteration   3: 2051624119.247 ops/s
Iteration   4: 2017454690.341 ops/s
Iteration   5: 2036559327.118 ops/s


Result "org.sample.JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod":
  2033992584.259 ±(99.9%) 53510710.775 ops/s [Average]
  (min, avg, max) = (2017454690.341, 2033992584.259, 2051624119.247), stdev = 13896561.658
  CI (99.9%): [1980481873.484, 2087503295.034] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.baseline

# Run progress: 4.26% complete, ETA 00:28:21
# Fork: 1 of 1
# Warmup Iteration   1: 625023574.652 ops/s
# Warmup Iteration   2: 1982840663.992 ops/s
# Warmup Iteration   3: 2040889958.491 ops/s
# Warmup Iteration   4: 1763219280.277 ops/s
# Warmup Iteration   5: 2009650724.010 ops/s
Iteration   1: 2015456960.950 ops/s
Iteration   2: 1977388445.188 ops/s
Iteration   3: 2041527046.038 ops/s
Iteration   4: 1860049023.052 ops/s
Iteration   5: 2011599603.810 ops/s


Result "org.sample.JMHBenchmark_02_InvokeWithReturn.baseline":
  1981204215.808 ±(99.9%) 275187143.562 ops/s [Average]
  (min, avg, max) = (1860049023.052, 1981204215.808, 2041527046.038), stdev = 71465227.289
  CI (99.9%): [1706017072.246, 2256391359.370] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.noInvocation

# Run progress: 6.38% complete, ETA 00:27:43
# Fork: 1 of 1
# Warmup Iteration   1: 56408519.323 ops/s
# Warmup Iteration   2: 203268099.274 ops/s
# Warmup Iteration   3: 212410353.386 ops/s
# Warmup Iteration   4: 213733823.958 ops/s
# Warmup Iteration   5: 213826428.744 ops/s
Iteration   1: 211225699.382 ops/s
Iteration   2: 214335760.715 ops/s
Iteration   3: 211108168.007 ops/s
Iteration   4: 204579249.390 ops/s
Iteration   5: 211545648.379 ops/s


Result "org.sample.JMHBenchmark_02_InvokeWithReturn.noInvocation":
  210558905.175 ±(99.9%) 13849060.160 ops/s [Average]
  (min, avg, max) = (204579249.390, 210558905.175, 214335760.715), stdev = 3596556.944
  CI (99.9%): [196709845.015, 224407965.335] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh

# Run progress: 8.51% complete, ETA 00:27:06
# Fork: 1 of 1
# Warmup Iteration   1: 58177970.182 ops/s
# Warmup Iteration   2: 191746562.122 ops/s
# Warmup Iteration   3: 205750984.158 ops/s
# Warmup Iteration   4: 197645197.509 ops/s
# Warmup Iteration   5: 213321225.994 ops/s
Iteration   1: 189039278.611 ops/s
Iteration   2: 189855907.945 ops/s
Iteration   3: 199801826.015 ops/s
Iteration   4: 199723095.222 ops/s
Iteration   5: 196947205.779 ops/s


Result "org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh":
  195073462.715 ±(99.9%) 20295639.787 ops/s [Average]
  (min, avg, max) = (189039278.611, 195073462.715, 199801826.015), stdev = 5270713.201
  CI (99.9%): [174777822.928, 215369102.501] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue

# Run progress: 10.64% complete, ETA 00:26:27
# Fork: 1 of 1
# Warmup Iteration   1: 42771533.915 ops/s
# Warmup Iteration   2: 164107524.699 ops/s
# Warmup Iteration   3: 202803908.889 ops/s
# Warmup Iteration   4: 191214858.785 ops/s
# Warmup Iteration   5: 199569352.658 ops/s
Iteration   1: 202801118.823 ops/s
Iteration   2: 197629310.865 ops/s
Iteration   3: 197225481.690 ops/s
Iteration   4: 200412986.814 ops/s
Iteration   5: 171560244.032 ops/s


Result "org.sample.JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue":
  193925828.445 ±(99.9%) 48922763.086 ops/s [Average]
  (min, avg, max) = (171560244.032, 193925828.445, 202801118.823), stdev = 12705086.213
  CI (99.9%): [145003065.358, 242848591.531] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.baseline

# Run progress: 12.77% complete, ETA 00:25:49
# Fork: 1 of 1
# Warmup Iteration   1: 537059898.863 ops/s
# Warmup Iteration   2: 1838453055.903 ops/s
# Warmup Iteration   3: 1964857621.871 ops/s
# Warmup Iteration   4: 1966807103.697 ops/s
# Warmup Iteration   5: 1988489176.331 ops/s
Iteration   1: 2010895732.817 ops/s
Iteration   2: 1957603154.863 ops/s
Iteration   3: 1983135950.507 ops/s
Iteration   4: 1982532701.037 ops/s
Iteration   5: 1949500608.366 ops/s


Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.baseline":
  1976733629.518 ±(99.9%) 93319160.922 ops/s [Average]
  (min, avg, max) = (1949500608.366, 1976733629.518, 2010895732.817), stdev = 24234689.744
  CI (99.9%): [1883414468.596, 2070052790.440] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.noInvocationWithReturnValue

# Run progress: 14.89% complete, ETA 00:25:12
# Fork: 1 of 1
# Warmup Iteration   1: 60418788.854 ops/s
# Warmup Iteration   2: 180144443.713 ops/s
# Warmup Iteration   3: 180923784.554 ops/s
# Warmup Iteration   4: 209087450.242 ops/s
# Warmup Iteration   5: 193285682.061 ops/s
Iteration   1: 198458729.614 ops/s
Iteration   2: 197165103.799 ops/s
Iteration   3: 205969144.039 ops/s
Iteration   4: 208860882.372 ops/s
Iteration   5: 203026437.758 ops/s


Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.noInvocationWithReturnValue":
  202696059.516 ±(99.9%) 18998714.705 ops/s [Average]
  (min, avg, max) = (197165103.799, 202696059.516, 208860882.372), stdev = 4933905.876
  CI (99.9%): [183697344.812, 221694774.221] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInline

# Run progress: 17.02% complete, ETA 00:24:34
# Fork: 1 of 1
# Warmup Iteration   1: 66232869.290 ops/s
# Warmup Iteration   2: 354344231.858 ops/s
# Warmup Iteration   3: 346691211.497 ops/s
# Warmup Iteration   4: 367626124.663 ops/s
# Warmup Iteration   5: 340776089.089 ops/s
Iteration   1: 363177000.785 ops/s
Iteration   2: 371896237.999 ops/s
Iteration   3: 368821617.204 ops/s
Iteration   4: 367669025.702 ops/s
Iteration   5: 355479684.860 ops/s


Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInline":
  365408713.310 ±(99.9%) 24536417.360 ops/s [Average]
  (min, avg, max) = (355479684.860, 365408713.310, 371896237.999), stdev = 6372029.670
  CI (99.9%): [340872295.950, 389945130.670] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInlineBh

# Run progress: 19.15% complete, ETA 00:23:56
# Fork: 1 of 1
# Warmup Iteration   1: 31928970.849 ops/s
# Warmup Iteration   2: 105366428.787 ops/s
# Warmup Iteration   3: 110108328.742 ops/s
# Warmup Iteration   4: 107617597.299 ops/s
# Warmup Iteration   5: 105630121.448 ops/s
Iteration   1: 108042555.576 ops/s
Iteration   2: 110431273.094 ops/s
Iteration   3: 106129073.209 ops/s
Iteration   4: 112249341.255 ops/s
Iteration   5: 110921950.585 ops/s


Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInlineBh":
  109554838.744 ±(99.9%) 9416447.525 ops/s [Average]
  (min, avg, max) = (106129073.209, 109554838.744, 112249341.255), stdev = 2445421.519
  CI (99.9%): [100138391.219, 118971286.269] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInline

# Run progress: 21.28% complete, ETA 00:23:19
# Fork: 1 of 1
# Warmup Iteration   1: 444977476.697 ops/s
# Warmup Iteration   2: 1798401463.877 ops/s
# Warmup Iteration   3: 1927009530.366 ops/s
# Warmup Iteration   4: 1913511910.974 ops/s
# Warmup Iteration   5: 1926962854.606 ops/s
Iteration   1: 1888624401.259 ops/s
Iteration   2: 1961106244.139 ops/s
Iteration   3: 1875101458.892 ops/s
Iteration   4: 1924449916.825 ops/s
Iteration   5: 1957020482.044 ops/s


Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInline":
  1921260500.632 ±(99.9%) 150031929.830 ops/s [Average]
  (min, avg, max) = (1875101458.892, 1921260500.632, 1961106244.139), stdev = 38962815.730
  CI (99.9%): [1771228570.801, 2071292430.462] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInlineBh

# Run progress: 23.40% complete, ETA 00:22:42
# Fork: 1 of 1
# Warmup Iteration   1: 64208661.373 ops/s
# Warmup Iteration   2: 197514355.062 ops/s
# Warmup Iteration   3: 206698868.169 ops/s
# Warmup Iteration   4: 203510557.330 ops/s
# Warmup Iteration   5: 198501699.900 ops/s
Iteration   1: 200895159.420 ops/s
Iteration   2: 203429854.422 ops/s
Iteration   3: 205507468.442 ops/s
Iteration   4: 203788662.475 ops/s
Iteration   5: 199651881.658 ops/s


Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInlineBh":
  202654605.283 ±(99.9%) 9058823.791 ops/s [Average]
  (min, avg, max) = (199651881.658, 202654605.283, 205507468.442), stdev = 2352547.771
  CI (99.9%): [193595781.492, 211713429.074] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintDontInline

# Run progress: 25.53% complete, ETA 00:22:04
# Fork: 1 of 1
# Warmup Iteration   1: 31733766.598 ops/s
# Warmup Iteration   2: 104781737.327 ops/s
# Warmup Iteration   3: 114132680.875 ops/s
# Warmup Iteration   4: 113719952.344 ops/s
# Warmup Iteration   5: 106674446.032 ops/s
Iteration   1: 114837524.227 ops/s
Iteration   2: 108839366.218 ops/s
Iteration   3: 109048861.419 ops/s
Iteration   4: 109354730.530 ops/s
Iteration   5: 108770441.438 ops/s


Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintDontInline":
  110170184.767 ±(99.9%) 10084855.691 ops/s [Average]
  (min, avg, max) = (108770441.438, 110170184.767, 114837524.227), stdev = 2619004.997
  CI (99.9%): [100085329.076, 120255040.457] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintInline

# Run progress: 27.66% complete, ETA 00:21:26
# Fork: 1 of 1
# Warmup Iteration   1: 49022215.892 ops/s
# Warmup Iteration   2: 192014865.688 ops/s
# Warmup Iteration   3: 200474063.545 ops/s
# Warmup Iteration   4: 208794834.754 ops/s
# Warmup Iteration   5: 200860126.448 ops/s
Iteration   1: 201138609.843 ops/s
Iteration   2: 206798556.292 ops/s
Iteration   3: 208670156.815 ops/s
Iteration   4: 195996498.949 ops/s
Iteration   5: 206283075.097 ops/s


Result "org.sample.JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintInline":
  203777379.399 ±(99.9%) 19901767.049 ops/s [Average]
  (min, avg, max) = (195996498.949, 203777379.399, 208670156.815), stdev = 5168425.702
  CI (99.9%): [183875612.350, 223679146.448] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.baseline

# Run progress: 29.79% complete, ETA 00:20:48
# Fork: 1 of 1
# Warmup Iteration   1: 554347668.696 ops/s
# Warmup Iteration   2: 1937552066.002 ops/s
# Warmup Iteration   3: 2002709604.411 ops/s
# Warmup Iteration   4: 1997513568.062 ops/s
# Warmup Iteration   5: 1941947833.790 ops/s
Iteration   1: 1981273207.920 ops/s
Iteration   2: 1985495020.666 ops/s
Iteration   3: 1999924414.657 ops/s
Iteration   4: 2039621670.944 ops/s
Iteration   5: 2018011190.768 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.baseline":
  2004865100.991 ±(99.9%) 93075461.254 ops/s [Average]
  (min, avg, max) = (1981273207.920, 2004865100.991, 2039621670.944), stdev = 24171401.714
  CI (99.9%): [1911789639.737, 2097940562.245] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue

# Run progress: 31.91% complete, ETA 00:20:10
# Fork: 1 of 1
# Warmup Iteration   1: 59930540.895 ops/s
# Warmup Iteration   2: 192349257.340 ops/s
# Warmup Iteration   3: 206519047.055 ops/s
# Warmup Iteration   4: 208194024.740 ops/s
# Warmup Iteration   5: 196210517.116 ops/s
Iteration   1: 203578579.269 ops/s
Iteration   2: 206238369.820 ops/s
Iteration   3: 206140232.601 ops/s
Iteration   4: 205182720.457 ops/s
Iteration   5: 203677208.751 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue":
  204963422.180 ±(99.9%) 4957695.034 ops/s [Average]
  (min, avg, max) = (203578579.269, 204963422.180, 206238369.820), stdev = 1287497.656
  CI (99.9%): [200005727.146, 209921117.213] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue

# Run progress: 34.04% complete, ETA 00:19:32
# Fork: 1 of 1
# Warmup Iteration   1: 56800573.919 ops/s
# Warmup Iteration   2: 205306914.471 ops/s
# Warmup Iteration   3: 214146649.488 ops/s
# Warmup Iteration   4: 213782001.952 ops/s
# Warmup Iteration   5: 213779832.966 ops/s
Iteration   1: 211597469.117 ops/s
Iteration   2: 208820861.874 ops/s
Iteration   3: 211141051.541 ops/s
Iteration   4: 200817385.319 ops/s
Iteration   5: 212538510.854 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue":
  208983055.741 ±(99.9%) 18350029.869 ops/s [Average]
  (min, avg, max) = (200817385.319, 208983055.741, 212538510.854), stdev = 4765444.484
  CI (99.9%): [190633025.872, 227333085.610] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod

# Run progress: 36.17% complete, ETA 00:18:54
# Fork: 1 of 1
# Warmup Iteration   1: 535296799.410 ops/s
# Warmup Iteration   2: 1956257742.778 ops/s
# Warmup Iteration   3: 2053508607.328 ops/s
# Warmup Iteration   4: 1954859416.435 ops/s
# Warmup Iteration   5: 1997577972.268 ops/s
Iteration   1: 2011939812.230 ops/s
Iteration   2: 2012419592.809 ops/s
Iteration   3: 2025267450.531 ops/s
Iteration   4: 1951188272.661 ops/s
Iteration   5: 2006058366.926 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod":
  2001374699.031 ±(99.9%) 111354354.397 ops/s [Average]
  (min, avg, max) = (1951188272.661, 2001374699.031, 2025267450.531), stdev = 28918372.216
  CI (99.9%): [1890020344.634, 2112729053.429] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue

# Run progress: 38.30% complete, ETA 00:18:16
# Fork: 1 of 1
# Warmup Iteration   1: 54560954.843 ops/s
# Warmup Iteration   2: 197529361.602 ops/s
# Warmup Iteration   3: 200626087.065 ops/s
# Warmup Iteration   4: 200865857.861 ops/s
# Warmup Iteration   5: 205529716.514 ops/s
Iteration   1: 201000698.238 ops/s
Iteration   2: 205100199.319 ops/s
Iteration   3: 206071163.787 ops/s
Iteration   4: 199596296.975 ops/s
Iteration   5: 202094246.901 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue":
  202772521.044 ±(99.9%) 10543127.295 ops/s [Average]
  (min, avg, max) = (199596296.975, 202772521.044, 206071163.787), stdev = 2738016.677
  CI (99.9%): [192229393.749, 213315648.338] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue

# Run progress: 40.43% complete, ETA 00:17:38
# Fork: 1 of 1
# Warmup Iteration   1: 57728769.859 ops/s
# Warmup Iteration   2: 196876325.001 ops/s
# Warmup Iteration   3: 200537807.382 ops/s
# Warmup Iteration   4: 197072275.295 ops/s
# Warmup Iteration   5: 205398175.258 ops/s
Iteration   1: 203973188.816 ops/s
Iteration   2: 208291113.310 ops/s
Iteration   3: 208794839.090 ops/s
Iteration   4: 203167555.503 ops/s
Iteration   5: 206111414.221 ops/s


Result "org.sample.JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue":
  206067622.188 ±(99.9%) 9661314.819 ops/s [Average]
  (min, avg, max) = (203167555.503, 206067622.188, 208794839.090), stdev = 2509012.778
  CI (99.9%): [196406307.369, 215728937.007] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.baseline

# Run progress: 42.55% complete, ETA 00:17:00
# Fork: 1 of 1
# Warmup Iteration   1: 359939644.586 ops/s
# Warmup Iteration   2: 1352168472.021 ops/s
# Warmup Iteration   3: 2030452406.790 ops/s
# Warmup Iteration   4: 2017324089.553 ops/s
# Warmup Iteration   5: 1998600861.550 ops/s
Iteration   1: 2037222702.613 ops/s
Iteration   2: 2017311345.566 ops/s
Iteration   3: 2053927575.085 ops/s
Iteration   4: 2005808610.574 ops/s
Iteration   5: 1955186238.142 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.baseline":
  2013891294.396 ±(99.9%) 144982861.580 ops/s [Average]
  (min, avg, max) = (1955186238.142, 2013891294.396, 2053927575.085), stdev = 37651588.739
  CI (99.9%): [1868908432.816, 2158874155.975] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS

# Run progress: 44.68% complete, ETA 00:16:22
# Fork: 1 of 1
# Warmup Iteration   1: 50140639.412 ops/s
# Warmup Iteration   2: 190938574.683 ops/s
# Warmup Iteration   3: 201894733.017 ops/s
# Warmup Iteration   4: 196288804.712 ops/s
# Warmup Iteration   5: 213268365.324 ops/s
Iteration   1: 199284074.676 ops/s
Iteration   2: 204902893.985 ops/s
Iteration   3: 204078309.922 ops/s
Iteration   4: 208486848.890 ops/s
Iteration   5: 198457690.911 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS":
  203041963.677 ±(99.9%) 16030098.944 ops/s [Average]
  (min, avg, max) = (198457690.911, 203041963.677, 208486848.890), stdev = 4162965.790
  CI (99.9%): [187011864.733, 219072062.621] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS

# Run progress: 46.81% complete, ETA 00:15:44
# Fork: 1 of 1
# Warmup Iteration   1: 41734487.730 ops/s
# Warmup Iteration   2: 181868068.489 ops/s
# Warmup Iteration   3: 202997477.521 ops/s
# Warmup Iteration   4: 211480705.697 ops/s
# Warmup Iteration   5: 200041106.228 ops/s
Iteration   1: 196778472.858 ops/s
Iteration   2: 202372832.321 ops/s
Iteration   3: 202560640.090 ops/s
Iteration   4: 204792063.410 ops/s
Iteration   5: 206584806.133 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS":
  202617762.963 ±(99.9%) 14229884.783 ops/s [Average]
  (min, avg, max) = (196778472.858, 202617762.963, 206584806.133), stdev = 3695455.889
  CI (99.9%): [188387878.179, 216847647.746] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.testInvocation

# Run progress: 48.94% complete, ETA 00:15:06
# Fork: 1 of 1
# Warmup Iteration   1: 370099876.188 ops/s
# Warmup Iteration   2: 1879308000.309 ops/s
# Warmup Iteration   3: 1918247399.963 ops/s
# Warmup Iteration   4: 1966207794.899 ops/s
# Warmup Iteration   5: 1944257253.765 ops/s
Iteration   1: 1952325857.022 ops/s
Iteration   2: 1936297622.933 ops/s
Iteration   3: 1949284254.111 ops/s
Iteration   4: 1934465760.382 ops/s
Iteration   5: 1963230455.316 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocation":
  1947120789.953 ±(99.9%) 45909355.176 ops/s [Average]
  (min, avg, max) = (1934465760.382, 1947120789.953, 1963230455.316), stdev = 11922513.748
  CI (99.9%): [1901211434.777, 1993030145.128] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS

# Run progress: 51.06% complete, ETA 00:14:29
# Fork: 1 of 1
# Warmup Iteration   1: 61862496.656 ops/s
# Warmup Iteration   2: 192041454.314 ops/s
# Warmup Iteration   3: 202369020.810 ops/s
# Warmup Iteration   4: 198606360.109 ops/s
# Warmup Iteration   5: 198689085.561 ops/s
Iteration   1: 203057625.302 ops/s
Iteration   2: 200286758.634 ops/s
Iteration   3: 204502695.780 ops/s
Iteration   4: 201759683.470 ops/s
Iteration   5: 202546227.639 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS":
  202430598.165 ±(99.9%) 6010673.921 ops/s [Average]
  (min, avg, max) = (200286758.634, 202430598.165, 204502695.780), stdev = 1560952.930
  CI (99.9%): [196419924.244, 208441272.086] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS

# Run progress: 53.19% complete, ETA 00:13:51
# Fork: 1 of 1
# Warmup Iteration   1: 53470151.220 ops/s
# Warmup Iteration   2: 199127489.259 ops/s
# Warmup Iteration   3: 195471454.383 ops/s
# Warmup Iteration   4: 197512895.251 ops/s
# Warmup Iteration   5: 197663398.194 ops/s
Iteration   1: 197281267.066 ops/s
Iteration   2: 200561277.295 ops/s
Iteration   3: 207556002.274 ops/s
Iteration   4: 208116579.826 ops/s
Iteration   5: 205806419.617 ops/s


Result "org.sample.JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS":
  203864309.216 ±(99.9%) 18237653.298 ops/s [Average]
  (min, avg, max) = (197281267.066, 203864309.216, 208116579.826), stdev = 4736260.645
  CI (99.9%): [185626655.917, 222101962.514] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke

# Run progress: 55.32% complete, ETA 00:13:13
# Fork: 1 of 1
# Warmup Iteration   1: 588105.694 ops/s
# Warmup Iteration   2: 1958154.112 ops/s
# Warmup Iteration   3: 2200758.824 ops/s
# Warmup Iteration   4: 2043570.631 ops/s
# Warmup Iteration   5: 2105913.390 ops/s
Iteration   1: 2190628.801 ops/s
Iteration   2: 2145345.245 ops/s
Iteration   3: 2112111.162 ops/s
Iteration   4: 2049296.149 ops/s
Iteration   5: 2094681.226 ops/s


Result "org.sample.JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke":
  2118412.517 ±(99.9%) 204850.250 ops/s [Average]
  (min, avg, max) = (2049296.149, 2118412.517, 2190628.801), stdev = 53198.959
  CI (99.9%): [1913562.267, 2323262.766] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_06_SumCalcInvoke.baseline

# Run progress: 57.45% complete, ETA 00:12:35
# Fork: 1 of 1
# Warmup Iteration   1: 511223658.733 ops/s
# Warmup Iteration   2: 1980896942.222 ops/s
# Warmup Iteration   3: 2005534137.541 ops/s
# Warmup Iteration   4: 1990748644.624 ops/s
# Warmup Iteration   5: 1993953778.665 ops/s
Iteration   1: 1942959371.066 ops/s
Iteration   2: 1951523478.804 ops/s
Iteration   3: 1972477884.083 ops/s
Iteration   4: 2006374004.056 ops/s
Iteration   5: 1959640707.048 ops/s


Result "org.sample.JMHBenchmark_06_SumCalcInvoke.baseline":
  1966595089.011 ±(99.9%) 95320615.496 ops/s [Average]
  (min, avg, max) = (1942959371.066, 1966595089.011, 2006374004.056), stdev = 24754461.141
  CI (99.9%): [1871274473.515, 2061915704.508] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc

# Run progress: 59.57% complete, ETA 00:11:57
# Fork: 1 of 1
# Warmup Iteration   1: 630005.053 ops/s
# Warmup Iteration   2: 1993875.976 ops/s
# Warmup Iteration   3: 2144110.745 ops/s
# Warmup Iteration   4: 2099652.684 ops/s
# Warmup Iteration   5: 2088724.578 ops/s
Iteration   1: 2067052.667 ops/s
Iteration   2: 2102953.213 ops/s
Iteration   3: 2102347.411 ops/s
Iteration   4: 2054247.924 ops/s
Iteration   5: 2076544.132 ops/s


Result "org.sample.JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc":
  2080629.069 ±(99.9%) 83191.378 ops/s [Average]
  (min, avg, max) = (2054247.924, 2080629.069, 2102953.213), stdev = 21604.537
  CI (99.9%): [1997437.691, 2163820.447] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithDontInline

# Run progress: 61.70% complete, ETA 00:11:20
# Fork: 1 of 1
# Warmup Iteration   1: 576780.156 ops/s
# Warmup Iteration   2: 1947643.572 ops/s
# Warmup Iteration   3: 2019712.831 ops/s
# Warmup Iteration   4: 2034228.593 ops/s
# Warmup Iteration   5: 2044093.077 ops/s
Iteration   1: 2058493.088 ops/s
Iteration   2: 2058740.327 ops/s
Iteration   3: 2037151.962 ops/s
Iteration   4: 2090797.178 ops/s
Iteration   5: 2072469.955 ops/s


Result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithDontInline":
  2063530.502 ±(99.9%) 76227.533 ops/s [Average]
  (min, avg, max) = (2037151.962, 2063530.502, 2090797.178), stdev = 19796.048
  CI (99.9%): [1987302.969, 2139758.035] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithInline

# Run progress: 63.83% complete, ETA 00:10:42
# Fork: 1 of 1
# Warmup Iteration   1: 576491.271 ops/s
# Warmup Iteration   2: 1892462.449 ops/s
# Warmup Iteration   3: 2007934.064 ops/s
# Warmup Iteration   4: 1998435.428 ops/s
# Warmup Iteration   5: 1917954.347 ops/s
Iteration   1: 2079660.971 ops/s
Iteration   2: 2039716.200 ops/s
Iteration   3: 2165534.590 ops/s
Iteration   4: 2126029.910 ops/s
Iteration   5: 2113366.856 ops/s


Result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithInline":
  2104861.705 ±(99.9%) 183468.568 ops/s [Average]
  (min, avg, max) = (2039716.200, 2104861.705, 2165534.590), stdev = 47646.205
  CI (99.9%): [1921393.137, 2288330.274] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_07_SumCalcWithCompileHint.baseline

# Run progress: 65.96% complete, ETA 00:10:04
# Fork: 1 of 1
# Warmup Iteration   1: 355296054.654 ops/s
# Warmup Iteration   2: 1958178289.187 ops/s
# Warmup Iteration   3: 1895273167.507 ops/s
# Warmup Iteration   4: 1953665180.021 ops/s
# Warmup Iteration   5: 2001845020.826 ops/s
Iteration   1: 1977117313.500 ops/s
Iteration   2: 1983613748.347 ops/s
Iteration   3: 1947817462.011 ops/s
Iteration   4: 1957566008.796 ops/s
Iteration   5: 1941311448.706 ops/s


Result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.baseline":
  1961485196.272 ±(99.9%) 70562012.125 ops/s [Average]
  (min, avg, max) = (1941311448.706, 1961485196.272, 1983613748.347), stdev = 18324730.470
  CI (99.9%): [1890923184.147, 2032047208.397] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_07_SumCalcWithCompileHint.noInvocationSumCalc

# Run progress: 68.09% complete, ETA 00:09:26
# Fork: 1 of 1
# Warmup Iteration   1: 589503.296 ops/s
# Warmup Iteration   2: 1901896.232 ops/s
# Warmup Iteration   3: 1940208.706 ops/s
# Warmup Iteration   4: 1989700.083 ops/s
# Warmup Iteration   5: 2011143.787 ops/s
Iteration   1: 2125155.400 ops/s
Iteration   2: 2070475.452 ops/s
Iteration   3: 2134887.590 ops/s
Iteration   4: 2028078.618 ops/s
Iteration   5: 2085413.060 ops/s


Result "org.sample.JMHBenchmark_07_SumCalcWithCompileHint.noInvocationSumCalc":
  2088802.024 ±(99.9%) 166516.729 ops/s [Average]
  (min, avg, max) = (2028078.618, 2088802.024, 2134887.590), stdev = 43243.866
  CI (99.9%): [1922285.295, 2255318.753] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.baseline

# Run progress: 70.21% complete, ETA 00:08:49
# Fork: 1 of 1
# Warmup Iteration   1: 363408123.523 ops/s
# Warmup Iteration   2: 1887443778.146 ops/s
# Warmup Iteration   3: 1939700860.421 ops/s
# Warmup Iteration   4: 1973924589.581 ops/s
# Warmup Iteration   5: 1914834437.881 ops/s
Iteration   1: 1956550081.777 ops/s
Iteration   2: 1865657606.003 ops/s
Iteration   3: 1937679679.075 ops/s
Iteration   4: 1987883536.723 ops/s
Iteration   5: 1948752783.194 ops/s


Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.baseline":
  1939304737.354 ±(99.9%) 174059200.366 ops/s [Average]
  (min, avg, max) = (1865657606.003, 1939304737.354, 1987883536.723), stdev = 45202621.586
  CI (99.9%): [1765245536.988, 2113363937.720] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke

# Run progress: 72.34% complete, ETA 00:08:11
# Fork: 1 of 1
# Warmup Iteration   1: 221210.757 ops/s
# Warmup Iteration   2: 702525.862 ops/s
# Warmup Iteration   3: 712404.156 ops/s
# Warmup Iteration   4: 744239.660 ops/s
# Warmup Iteration   5: 747836.466 ops/s
Iteration   1: 728367.482 ops/s
Iteration   2: 740673.698 ops/s
Iteration   3: 735821.473 ops/s
Iteration   4: 722002.427 ops/s
Iteration   5: 729585.347 ops/s


Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke":
  731290.085 ±(99.9%) 27653.281 ops/s [Average]
  (min, avg, max) = (722002.427, 731290.085, 740673.698), stdev = 7181.469
  CI (99.9%): [703636.804, 758943.367] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc

# Run progress: 74.47% complete, ETA 00:07:33
# Fork: 1 of 1
# Warmup Iteration   1: 220607.403 ops/s
# Warmup Iteration   2: 708543.952 ops/s
# Warmup Iteration   3: 749464.337 ops/s
# Warmup Iteration   4: 733385.805 ops/s
# Warmup Iteration   5: 726091.001 ops/s
Iteration   1: 732129.795 ops/s
Iteration   2: 732998.832 ops/s
Iteration   3: 751826.578 ops/s
Iteration   4: 744829.399 ops/s
Iteration   5: 738501.184 ops/s


Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc":
  740057.157 ±(99.9%) 32007.726 ops/s [Average]
  (min, avg, max) = (732129.795, 740057.157, 751826.578), stdev = 8312.305
  CI (99.9%): [708049.431, 772064.884] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke

# Run progress: 76.60% complete, ETA 00:06:55
# Fork: 1 of 1
# Warmup Iteration   1: 230257.296 ops/s
# Warmup Iteration   2: 684978.759 ops/s
# Warmup Iteration   3: 733614.810 ops/s
# Warmup Iteration   4: 735829.908 ops/s
# Warmup Iteration   5: 741485.751 ops/s
Iteration   1: 745074.590 ops/s
Iteration   2: 732865.458 ops/s
Iteration   3: 738564.865 ops/s
Iteration   4: 762655.695 ops/s
Iteration   5: 727818.288 ops/s


Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke":
  741395.779 ±(99.9%) 52042.361 ops/s [Average]
  (min, avg, max) = (727818.288, 741395.779, 762655.695), stdev = 13515.236
  CI (99.9%): [689353.418, 793438.140] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested

# Run progress: 78.72% complete, ETA 00:06:17
# Fork: 1 of 1
# Warmup Iteration   1: 237252.002 ops/s
# Warmup Iteration   2: 713388.342 ops/s
# Warmup Iteration   3: 747980.563 ops/s
# Warmup Iteration   4: 752106.831 ops/s
# Warmup Iteration   5: 730247.787 ops/s
Iteration   1: 719253.930 ops/s
Iteration   2: 723486.218 ops/s
Iteration   3: 747585.556 ops/s
Iteration   4: 719046.985 ops/s
Iteration   5: 710034.159 ops/s


Result "org.sample.JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested":
  723881.370 ±(99.9%) 54407.784 ops/s [Average]
  (min, avg, max) = (710034.159, 723881.370, 747585.556), stdev = 14129.529
  CI (99.9%): [669473.586, 778289.153] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithDontInline

# Run progress: 80.85% complete, ETA 00:05:40
# Fork: 1 of 1
# Warmup Iteration   1: 76202.919 ops/s
# Warmup Iteration   2: 292687.355 ops/s
# Warmup Iteration   3: 312741.988 ops/s
# Warmup Iteration   4: 313784.151 ops/s
# Warmup Iteration   5: 317089.182 ops/s
Iteration   1: 318572.047 ops/s
Iteration   2: 319107.826 ops/s
Iteration   3: 317924.090 ops/s
Iteration   4: 320253.449 ops/s
Iteration   5: 308881.745 ops/s


Result "org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithDontInline":
  316947.831 ±(99.9%) 17671.644 ops/s [Average]
  (min, avg, max) = (308881.745, 316947.831, 320253.449), stdev = 4589.270
  CI (99.9%): [299276.187, 334619.475] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithInline

# Run progress: 82.98% complete, ETA 00:05:02
# Fork: 1 of 1
# Warmup Iteration   1: 115986.161 ops/s
# Warmup Iteration   2: 327248.601 ops/s
# Warmup Iteration   3: 335213.164 ops/s
# Warmup Iteration   4: 358017.910 ops/s
# Warmup Iteration   5: 359025.489 ops/s
Iteration   1: 352885.776 ops/s
Iteration   2: 358435.323 ops/s
Iteration   3: 359013.321 ops/s
Iteration   4: 363633.554 ops/s
Iteration   5: 355494.760 ops/s


Result "org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithInline":
  357892.547 ±(99.9%) 15561.442 ops/s [Average]
  (min, avg, max) = (352885.776, 357892.547, 363633.554), stdev = 4041.257
  CI (99.9%): [342331.105, 373453.989] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.baseline

# Run progress: 85.11% complete, ETA 00:04:24
# Fork: 1 of 1
# Warmup Iteration   1: 374107416.212 ops/s
# Warmup Iteration   2: 1962294506.560 ops/s
# Warmup Iteration   3: 2007701947.853 ops/s
# Warmup Iteration   4: 1927306048.107 ops/s
# Warmup Iteration   5: 1966945130.843 ops/s
Iteration   1: 1974184438.056 ops/s
Iteration   2: 1964112299.583 ops/s
Iteration   3: 1919593242.365 ops/s
Iteration   4: 1963761089.378 ops/s
Iteration   5: 1993539088.576 ops/s


Result "org.sample.JMHBenchmark_09_NumberOfSumCalcWithCompileHint.baseline":
  1963038031.592 ±(99.9%) 104459734.314 ops/s [Average]
  (min, avg, max) = (1919593242.365, 1963038031.592, 1993539088.576), stdev = 27127861.275
  CI (99.9%): [1858578297.278, 2067497765.906] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_10_longSumCalc.baseline

# Run progress: 87.23% complete, ETA 00:03:46
# Fork: 1 of 1
# Warmup Iteration   1: 473413766.956 ops/s
# Warmup Iteration   2: 1990530469.430 ops/s
# Warmup Iteration   3: 1979768197.086 ops/s
# Warmup Iteration   4: 1967970367.240 ops/s
# Warmup Iteration   5: 1899317770.562 ops/s
Iteration   1: 1967632610.984 ops/s
Iteration   2: 1990557742.213 ops/s
Iteration   3: 1957380787.606 ops/s
Iteration   4: 1937675814.386 ops/s
Iteration   5: 1951269012.403 ops/s


Result "org.sample.JMHBenchmark_10_longSumCalc.baseline":
  1960903193.519 ±(99.9%) 76273209.690 ops/s [Average]
  (min, avg, max) = (1937675814.386, 1960903193.519, 1990557742.213), stdev = 19807910.341
  CI (99.9%): [1884629983.828, 2037176403.209] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_10_longSumCalc.longSumCalc

# Run progress: 89.36% complete, ETA 00:03:08
# Fork: 1 of 1
# Warmup Iteration   1: 38039.949 ops/s
# Warmup Iteration   2: 88902.201 ops/s
# Warmup Iteration   3: 125797.997 ops/s
# Warmup Iteration   4: 127618.335 ops/s
# Warmup Iteration   5: 127456.876 ops/s
Iteration   1: 127795.113 ops/s
Iteration   2: 127239.444 ops/s
Iteration   3: 128107.749 ops/s
Iteration   4: 130361.449 ops/s
Iteration   5: 133572.851 ops/s


Result "org.sample.JMHBenchmark_10_longSumCalc.longSumCalc":
  129415.321 ±(99.9%) 10050.378 ops/s [Average]
  (min, avg, max) = (127239.444, 129415.321, 133572.851), stdev = 2610.051
  CI (99.9%): [119364.943, 139465.699] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc

# Run progress: 91.49% complete, ETA 00:02:31
# Fork: 1 of 1
# Warmup Iteration   1: 31474.102 ops/s
# Warmup Iteration   2: 94440.291 ops/s
# Warmup Iteration   3: 105216.653 ops/s
# Warmup Iteration   4: 107699.815 ops/s
# Warmup Iteration   5: 111248.834 ops/s
Iteration   1: 112603.232 ops/s
Iteration   2: 110079.771 ops/s
Iteration   3: 110339.775 ops/s
Iteration   4: 110802.830 ops/s
Iteration   5: 110117.049 ops/s


Result "org.sample.JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc":
  110788.531 ±(99.9%) 4060.537 ops/s [Average]
  (min, avg, max) = (110079.771, 110788.531, 112603.232), stdev = 1054.509
  CI (99.9%): [106727.994, 114849.069] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.baseline

# Run progress: 93.62% complete, ETA 00:01:53
# Fork: 1 of 1
# Warmup Iteration   1: 507488922.515 ops/s
# Warmup Iteration   2: 1972426068.675 ops/s
# Warmup Iteration   3: 2008436330.667 ops/s
# Warmup Iteration   4: 2015993905.254 ops/s
# Warmup Iteration   5: 1995222173.562 ops/s
Iteration   1: 1982065474.441 ops/s
Iteration   2: 1897412777.927 ops/s
Iteration   3: 1983250979.969 ops/s
Iteration   4: 1934817243.002 ops/s
Iteration   5: 1931840045.362 ops/s


Result "org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.baseline":
  1945877304.140 ±(99.9%) 141147967.661 ops/s [Average]
  (min, avg, max) = (1897412777.927, 1945877304.140, 1983250979.969), stdev = 36655678.967
  CI (99.9%): [1804729336.479, 2087025271.801] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithDontInline

# Run progress: 95.74% complete, ETA 00:01:15
# Fork: 1 of 1
# Warmup Iteration   1: 9138.549 ops/s
# Warmup Iteration   2: 28022.645 ops/s
# Warmup Iteration   3: 27404.415 ops/s
# Warmup Iteration   4: 29200.128 ops/s
# Warmup Iteration   5: 29418.347 ops/s
Iteration   1: 28354.641 ops/s
Iteration   2: 29259.128 ops/s
Iteration   3: 29418.142 ops/s
Iteration   4: 28111.900 ops/s
Iteration   5: 29762.837 ops/s


Result "org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithDontInline":
  28981.330 ±(99.9%) 2741.389 ops/s [Average]
  (min, avg, max) = (28111.900, 28981.330, 29762.837), stdev = 711.930
  CI (99.9%): [26239.941, 31722.719] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/bellsoft-java11-amd64/bin/java
# VM options: -XX:+Inline -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 4 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithInline

# Run progress: 97.87% complete, ETA 00:00:37
# Fork: 1 of 1
# Warmup Iteration   1: 10157.591 ops/s
# Warmup Iteration   2: 33052.809 ops/s
# Warmup Iteration   3: 27039.416 ops/s
# Warmup Iteration   4: 32325.668 ops/s
# Warmup Iteration   5: 32758.319 ops/s
Iteration   1: 33332.131 ops/s
Iteration   2: 33277.584 ops/s
Iteration   3: 32869.436 ops/s
Iteration   4: 33283.552 ops/s
Iteration   5: 32193.828 ops/s


Result "org.sample.JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithInline":
  32991.306 ±(99.9%) 1861.049 ops/s [Average]
  (min, avg, max) = (32193.828, 32991.306, 33332.131), stdev = 483.308
  CI (99.9%): [31130.258, 34852.355] (assumes normal distribution)


# Run complete. Total time: 00:29:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                               Mode  Cnt           Score           Error  Units
JMHBenchmark_01_DummyInvoke.baseline                                                                   thrpt    5  2052315358.370 ±  69952349.667  ops/s
JMHBenchmark_01_DummyInvoke.testInvocationDummyMethod                                                  thrpt    5  2033992584.259 ±  53510710.775  ops/s
JMHBenchmark_02_InvokeWithReturn.baseline                                                              thrpt    5  1981204215.808 ± 275187143.562  ops/s
JMHBenchmark_02_InvokeWithReturn.noInvocation                                                          thrpt    5   210558905.175 ±  13849060.160  ops/s
JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithBh                                       thrpt    5   195073462.715 ±  20295639.787  ops/s
JMHBenchmark_02_InvokeWithReturn.testInvocationDummyMethodWithReturnValue                              thrpt    5   193925828.445 ±  48922763.086  ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.baseline                                                    thrpt    5  1976733629.518 ±  93319160.922  ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.noInvocationWithReturnValue                                 thrpt    5   202696059.516 ±  18998714.705  ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInline                 thrpt    5   365408713.310 ±  24536417.360  ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintDontInlineBh               thrpt    5   109554838.744 ±   9416447.525  ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInline                     thrpt    5  1921260500.632 ± 150031929.830  ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithHintInlineBh                   thrpt    5   202654605.283 ±   9058823.791  ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintDontInline  thrpt    5   110170184.767 ±  10084855.691  ops/s
JMHBenchmark_03_DummyInvokeWithCompileHint.testInvocationDummyMethodWithReturnValueWithHintInline      thrpt    5   203777379.399 ±  19901767.049  ops/s
JMHBenchmark_04_DummyInvokeWithValue.baseline                                                          thrpt    5  2004865100.991 ±  93075461.254  ops/s
JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnValue                                           thrpt    5   204963422.180 ±   4957695.034  ops/s
JMHBenchmark_04_DummyInvokeWithValue.noInvocationReturnVolatileValue                                   thrpt    5   208983055.741 ±  18350029.869  ops/s
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethod                                         thrpt    5  2001374699.031 ± 111354354.397  ops/s
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnValue                          thrpt    5   202772521.044 ±  10543127.295  ops/s
JMHBenchmark_04_DummyInvokeWithValue.testInvocationDummyMethodWithReturnVolatileValue                  thrpt    5   206067622.188 ±   9661314.819  ops/s
JMHBenchmark_05_DummyInvokeState.baseline                                                              thrpt    5  2013891294.396 ± 144982861.580  ops/s
JMHBenchmark_05_DummyInvokeState.noInvocationReturnValueBS                                             thrpt    5   203041963.677 ±  16030098.944  ops/s
JMHBenchmark_05_DummyInvokeState.noInvocationlineReturnValueTS                                         thrpt    5   202617762.963 ±  14229884.783  ops/s
JMHBenchmark_05_DummyInvokeState.testInvocation                                                        thrpt    5  1947120789.953 ±  45909355.176  ops/s
JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueBS                                           thrpt    5   202430598.165 ±   6010673.921  ops/s
JMHBenchmark_05_DummyInvokeState.testInvocationReturnValueTS                                           thrpt    5   203864309.216 ±  18237653.298  ops/s
JMHBenchmark_06_SumCalcInvoke.SumCalcInvoke                                                            thrpt    5     2118412.517 ±    204850.250  ops/s
JMHBenchmark_06_SumCalcInvoke.baseline                                                                 thrpt    5  1966595089.011 ±  95320615.496  ops/s
JMHBenchmark_06_SumCalcInvoke.noInvocationSumCalc                                                      thrpt    5     2080629.069 ±     83191.378  ops/s
JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithDontInline                                           thrpt    5     2063530.502 ±     76227.533  ops/s
JMHBenchmark_07_SumCalcWithCompileHint.SumCalcWithInline                                               thrpt    5     2104861.705 ±    183468.568  ops/s
JMHBenchmark_07_SumCalcWithCompileHint.baseline                                                        thrpt    5  1961485196.272 ±  70562012.125  ops/s
JMHBenchmark_07_SumCalcWithCompileHint.noInvocationSumCalc                                             thrpt    5     2088802.024 ±    166516.729  ops/s
JMHBenchmark_08_NumberOfSumCalc.baseline                                                               thrpt    5  1939304737.354 ± 174059200.366  ops/s
JMHBenchmark_08_NumberOfSumCalc.longSumCalcInvoke                                                      thrpt    5      731290.085 ±     27653.281  ops/s
JMHBenchmark_08_NumberOfSumCalc.noInvocationNumberSumCalc                                              thrpt    5      740057.157 ±     32007.726  ops/s
JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvoke                                                    thrpt    5      741395.779 ±     52042.361  ops/s
JMHBenchmark_08_NumberOfSumCalc.numberSumCalcInvokeNested                                              thrpt    5      723881.370 ±     54407.784  ops/s
JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithDontInline                                   thrpt    5      316947.831 ±     17671.644  ops/s
JMHBenchmark_09_NumberOfSumCalcWithCompileHint.SumCalcWithInline                                       thrpt    5      357892.547 ±     15561.442  ops/s
JMHBenchmark_09_NumberOfSumCalcWithCompileHint.baseline                                                thrpt    5  1963038031.592 ± 104459734.314  ops/s
JMHBenchmark_10_longSumCalc.baseline                                                                   thrpt    5  1960903193.519 ±  76273209.690  ops/s
JMHBenchmark_10_longSumCalc.longSumCalc                                                                thrpt    5      129415.321 ±     10050.378  ops/s
JMHBenchmark_10_longSumCalc.noInvocationlongSumCalc                                                    thrpt    5      110788.531 ±      4060.537  ops/s
JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.baseline                                    thrpt    5  1945877304.140 ± 141147967.661  ops/s
JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithDontInline                       thrpt    5       28981.330 ±      2741.389  ops/s
JMHBenchmark_11_NumberOfSumCalcWithLongCalcWithCompileHint.sumCalcWithInline                           thrpt    5       32991.306 ±      1861.049  ops/s

Benchmark result is saved to results/graal+Inline.txt
